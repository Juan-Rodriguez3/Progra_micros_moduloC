
Prelab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fb  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000666  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028c  00000000  00000000  00000fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000086  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
//Subrutinas NON Interrupt
void setup () {
	
	
	
	DDRC = 0x00;		//Pines PC0, PC1, PC2 como entrada
  90:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1) ;
  92:	88 b1       	in	r24, 0x08	; 8
  94:	83 60       	ori	r24, 0x03	; 3
  96:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0xFF;		//Puerto D como salida
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;
  9c:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		//Pines PB0, PB1 y PB2 como salida
  a4:	15 b8       	out	0x05, r1	; 5
	
	PCICR |= (1 << PCIE1);		//habilita interrupciones en el PORTC
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//interrupciones para PC0 y PC1
  b0:	ec e6       	ldi	r30, 0x6C	; 108
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	80 83       	st	Z, r24
	
	sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <main>:


//Funcion principal
int main(void)
{
    setup();
  be:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    while (1) 
    {
		switch (pb){
  c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pb>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	19 f0       	breq	.+6      	; 0xd0 <main+0x12>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	51 f0       	breq	.+20     	; 0xe2 <main+0x24>
  ce:	f9 cf       	rjmp	.-14     	; 0xc2 <main+0x4>
			case 1:
			contador++;
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD=contador;			//Incrementar contador
  da:	8b b9       	out	0x0b, r24	; 11
			pb=0;				//Resetear pb
  dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pb>
			break;
  e0:	f0 cf       	rjmp	.-32     	; 0xc2 <main+0x4>
			
			case 2:
			contador--;			//Decrementar contador
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD=contador;
  ec:	8b b9       	out	0x0b, r24	; 11
			pb=0;				//Resetear pb
  ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pb>
			break;		
  f2:	e7 cf       	rjmp	.-50     	; 0xc2 <main+0x4>

000000f4 <__vector_4>:

	


//Subrutinas de interrupciones
ISR(PCINT1_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
	uint8_t ultimate_state = 0xFF;
	uint8_t current_state = PINB & ((1 << PINB0)|(1<<PINB1));
 100:	83 b1       	in	r24, 0x03	; 3
	
	if (ultimate_state & (1<<PINB0) && !(current_state&(1<<PINB0))){
 102:	80 fd       	sbrc	r24, 0
 104:	04 c0       	rjmp	.+8      	; 0x10e <__vector_4+0x1a>
		pb=1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pb>
 10c:	08 c0       	rjmp	.+16     	; 0x11e <__vector_4+0x2a>
	}
	else if (ultimate_state & (1<<PINB1) && !(current_state&(1<<PINB1))){
 10e:	81 fd       	sbrc	r24, 1
 110:	04 c0       	rjmp	.+8      	; 0x11a <__vector_4+0x26>
		pb=2;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pb>
 118:	02 c0       	rjmp	.+4      	; 0x11e <__vector_4+0x2a>
	}
	else{
		pb=0;
 11a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pb>
	}
	ultimate_state=current_state;
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
