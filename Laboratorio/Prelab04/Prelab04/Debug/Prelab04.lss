
Prelab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d8  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000280  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
//Subrutinas NON Interrupt
void setup () {
	
	
	
	DDRC = 0x00;		//Pines PC0, PC1, PC2 como entrada
  90:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1) ;		//pullups portc
  92:	88 b1       	in	r24, 0x08	; 8
  94:	83 60       	ori	r24, 0x03	; 3
  96:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0xFF;		//Puerto D como salida
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;
  9c:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		//Pines PB0, PB1 y PB2 como salida
  a4:	15 b8       	out	0x05, r1	; 5
	
	PCICR |= (1 << PCIE1);		//habilita interrupciones en el PORTC
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//interrupciones para PC0 y PC1
  b0:	ec e6       	ldi	r30, 0x6C	; 108
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	80 83       	st	Z, r24
	
	sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <main>:


//Funcion principal
int main(void)
{
    setup();
  be:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    while (1) 
    {
		PORTB = (1<<PORTB2);
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	85 b9       	out	0x05, r24	; 5
		switch (pb){
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	19 f0       	breq	.+6      	; 0xd4 <main+0x16>
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	39 f0       	breq	.+14     	; 0xe0 <main+0x22>
  d2:	f7 cf       	rjmp	.-18     	; 0xc2 <main+0x4>
			case 1:
			PORTD++;			//Incrementar contador
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	8b b9       	out	0x0b, r24	; 11
			pb=0;				//Resetear pb
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
  de:	f1 cf       	rjmp	.-30     	; 0xc2 <main+0x4>
			
			case 2:
			PORTD--;			//Decrementar contador
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	8b b9       	out	0x0b, r24	; 11
			pb=0;				//Resetear pb
  e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;		
  ea:	eb cf       	rjmp	.-42     	; 0xc2 <main+0x4>

000000ec <__vector_4>:

//Subrutinas NON Interrupt	


//Subrutinas de interrupciones
ISR(PCINT1_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
	
	
	if (!(PINC & (1<<PINC0))){
  f8:	30 99       	sbic	0x06, 0	; 6
  fa:	04 c0       	rjmp	.+8      	; 0x104 <__vector_4+0x18>
		pb=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	08 c0       	rjmp	.+16     	; 0x114 <__vector_4+0x28>
	}
	else if (!(PINC & (1<<PINC1))){
 104:	31 99       	sbic	0x06, 1	; 6
 106:	04 c0       	rjmp	.+8      	; 0x110 <__vector_4+0x24>
		pb=2;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__vector_4+0x28>
	}
	else{
		pb=0;
 110:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
