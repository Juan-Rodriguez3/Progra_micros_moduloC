
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074e  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  9e:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	initPWM1();
	sei();
}

void initADC(){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR);	// 5V de referencia - Justificación a la izquierda
  ac:	80 81       	ld	r24, Z
  ae:	80 66       	ori	r24, 0x60	; 96
  b0:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS1)|(1<<ADPS0); //Habilitación de ADC y interrupción - Prescaler para 125 Khz 
  b8:	80 81       	ld	r24, Z
  ba:	8b 68       	ori	r24, 0x8B	; 139
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Iniciar conversión
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <initPWM1>:
}

void initPWM1(){				
	TCCR1A = 0;
  c6:	a0 e8       	ldi	r26, 0x80	; 128
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	1c 92       	st	X, r1
	TCCR1B = 0;
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) ; //Modo non-invertido
  d2:	8c 91       	ld	r24, X
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8c 93       	st	X, r24
	//Modo FAST PWM con TOP en ICR1
	TCCR1A |= (1<<WGM11);
  d8:	8c 91       	ld	r24, X
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13);
  de:	80 81       	ld	r24, Z
  e0:	88 61       	ori	r24, 0x18	; 24
  e2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);	//Prescaler de 8
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
	ICR1= 2499; //TOP
  ea:	83 ec       	ldi	r24, 0xC3	; 195
  ec:	99 e0       	ldi	r25, 0x09	; 9
  ee:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  f2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 62;	//Duty cycle 2.5%
  f6:	8e e3       	ldi	r24, 0x3E	; 62
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 102:	08 95       	ret

00000104 <setup>:
		
    }
}
//************Funciones************
void setup(){
	cli();
 104:	f8 94       	cli
	CLKPR = (1<< CLKPCE);
 106:	e1 e6       	ldi	r30, 0x61	; 97
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
	CLKPR |= (1<<CLKPS2);	//1Mhz
 10e:	80 81       	ld	r24, Z
 110:	84 60       	ori	r24, 0x04	; 4
 112:	80 83       	st	Z, r24
	DDRB |= (1 << PORTB1);	//PB1 como salida
 114:	84 b1       	in	r24, 0x04	; 4
 116:	82 60       	ori	r24, 0x02	; 2
 118:	84 b9       	out	0x04, r24	; 4
		
	UCSR0B = 0;				//Comunicación serial
 11a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initPWM1();
 122:	0e 94 63 00 	call	0xc6	; 0xc6 <initPWM1>
	sei();
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <main>:
uint8_t limit_inf=101;
uint16_t rango=307;

int main()
{
    setup();
 12a:	0e 94 82 00 	call	0x104	; 0x104 <setup>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x4>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
