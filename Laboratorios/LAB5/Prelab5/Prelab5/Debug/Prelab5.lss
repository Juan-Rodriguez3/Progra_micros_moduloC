
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000926  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078f  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f9  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c7  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  9e:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
    initPWM1(compare, inv, modo, prescaler, periodo);
    sei();
}

void init_ADC(){
	ADMUX = 0;							//Canal del ADC
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR)|(1<<MUX1);    // 5V de referencia - Justificación a la izquierda
  ac:	80 81       	ld	r24, Z
  ae:	82 66       	ori	r24, 0x62	; 98
  b0:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Interrupciones - Prescaler 128
  b8:	80 81       	ld	r24, Z
  ba:	8f 68       	ori	r24, 0x8F	; 143
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Iniciar conversión
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <setup>:
        _delay_ms(10);  // Pequeño retardo para estabilidad
    }
}

//************Funciones************
void setup(){
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
    cli();
  ca:	f8 94       	cli
    //CLKPR = (1<< CLKPCE);
    //CLKPR |= (1<<CLKPS2);    //1Mhz
    
    UCSR0B = 0;                //Comunicación serial
  cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//Puerto C como entrada y pullup deshabilitado.
	DDRC=0x00;
  d0:	17 b8       	out	0x07, r1	; 7
	PORTC=0x00;
  d2:	18 b8       	out	0x08, r1	; 8
	
    init_ADC();
  d4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
    initPWM1(compare, inv, modo, prescaler, periodo);
  d8:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <prescaler>
  e4:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <prescaler+0x1>
  e8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <modo>
  ec:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <inv>
  f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <compare>
  f4:	0e 94 b9 00 	call	0x172	; 0x172 <initPWM1>
    sei();
  f8:	78 94       	sei
}
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <main>:
volatile uint8_t valorADC = 0;
volatile uint16_t DUT = 0;

int main()
{
    setup();
 100:	0e 94 63 00 	call	0xc6	; 0xc6 <setup>
    
    while (1) 
    {
		 DUT = DutyCycle(valorADC);
 104:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <valorADC>
 108:	0e 94 b2 00 	call	0x164	; 0x164 <DutyCycle>
 10c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 110:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		 OCR1B = DUT;            // Actualizamos el duty cycle
 114:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 118:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 11c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 120:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9c e9       	ldi	r25, 0x9C	; 156
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x28>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x2e>
 12e:	00 00       	nop
 130:	e9 cf       	rjmp	.-46     	; 0x104 <main+0x4>

00000132 <__vector_21>:
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Interrupciones - Prescaler 128
	ADCSRA |= (1<<ADSC); //Iniciar conversión
}

//************Interrupciones************
ISR(ADC_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
    valorADC = ADCH;        // Leemos solo ADCH por justificación izquierda
 142:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 146:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <valorADC>
    ADCSRA |= (1<<ADSC);    // Iniciamos nueva conversión
 14a:	ea e7       	ldi	r30, 0x7A	; 122
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 64       	ori	r24, 0x40	; 64
 152:	80 83       	st	Z, r24
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <DutyCycle>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdint.h>

uint16_t DutyCycle(uint8_t lec_ADC){
	return (1000UL + lec_ADC * (4000UL /255));
 164:	2f e0       	ldi	r18, 0x0F	; 15
 166:	82 9f       	mul	r24, r18
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
}
 16c:	88 51       	subi	r24, 0x18	; 24
 16e:	9c 4f       	sbci	r25, 0xFC	; 252
 170:	08 95       	ret

00000172 <initPWM1>:

void initPWM1(uint8_t compare, uint8_t inv, uint8_t mode, uint16_t prescaler, uint16_t periodo) {
	TCCR1A = 0;
 172:	a0 e8       	ldi	r26, 0x80	; 128
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	1c 92       	st	X, r1
	TCCR1B = 0;
 178:	e1 e8       	ldi	r30, 0x81	; 129
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	10 82       	st	Z, r1
	DDRB = 0;
 17e:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 180:	15 b8       	out	0x05, r1	; 5
		default:
		TCCR1B &= ~((1<<CS10)|(1<<CS12)|(1<<CS11));
		break;
		}	*/	
	// Configuraci?n para PWM en OC1B (PB2)
	TCCR1A |= (1 << COM1B1);  // PWM no-invertido
 182:	8c 91       	ld	r24, X
 184:	80 62       	ori	r24, 0x20	; 32
 186:	8c 93       	st	X, r24
	
	// Modo Fast PWM con TOP en ICR1 (Modo 14)
	TCCR1A |= (1 << WGM11);
 188:	8c 91       	ld	r24, X
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 18e:	80 81       	ld	r24, Z
 190:	88 61       	ori	r24, 0x18	; 24
 192:	80 83       	st	Z, r24
	
	// Prescaler de 8 (Frecuencia PWM = 50Hz)
	TCCR1B |= (1 << CS11);
 194:	80 81       	ld	r24, Z
 196:	82 60       	ori	r24, 0x02	; 2
 198:	80 83       	st	Z, r24
	//OCR1B =1005;
	//OCR1B =4995;
	ICR1 = 39999;   // TOP value para 50Hz
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	9c e9       	ldi	r25, 0x9C	; 156
 19e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	DDRB |= (1 << DDB2);  // Configura PB2 (OC1B) como salida
 1a6:	84 b1       	in	r24, 0x04	; 4
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	84 b9       	out	0x04, r24	; 4
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
