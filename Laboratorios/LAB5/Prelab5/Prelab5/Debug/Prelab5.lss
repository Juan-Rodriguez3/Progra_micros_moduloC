
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  0000040e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a9  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005dc  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000167  00000000  00000000  0000216b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000022d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_21>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	f8 00       	.word	0x00f8	; ????
  6a:	fe 00       	.word	0x00fe	; ????
  6c:	04 01       	movw	r0, r8
  6e:	68 01       	movw	r12, r16
  70:	0a 01       	movw	r0, r20
  72:	15 01       	movw	r2, r10
  74:	20 01       	movw	r4, r0
  76:	2b 01       	movw	r4, r22
  78:	31 01       	movw	r6, r2
  7a:	3c 01       	movw	r6, r24
  7c:	47 01       	movw	r8, r14
  7e:	68 01       	movw	r12, r16
  80:	68 01       	movw	r12, r16
  82:	52 01       	movw	r10, r4
  84:	5d 01       	movw	r10, r26

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e4 e7       	ldi	r30, 0x74	; 116
  9a:	f3 e0       	ldi	r31, 0x03	; 3
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a6 e0       	ldi	r26, 0x06	; 6
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	ab 30       	cpi	r26, 0x0B	; 11
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  bc:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <ADC_init>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdint.h>

void ADC_init(){
	ADMUX = 0;
  c4:	ec e7       	ldi	r30, 0x7C	; 124
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR);    // 5V de referencia - Justificación a la izquierda - canal 0
  ca:	80 81       	ld	r24, Z
  cc:	80 66       	ori	r24, 0x60	; 96
  ce:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Interrupciones - Prescaler 128
  d6:	80 81       	ld	r24, Z
  d8:	8f 68       	ori	r24, 0x8F	; 143
  da:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Iniciar conversión
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <setup>:
}

//************Funciones************


void setup(){
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
    cli();
  e8:	f8 94       	cli
    //CLKPR = (1<< CLKPCE);
    //CLKPR |= (1<<CLKPS2);    //1Mhz
    
    UCSR0B = 0;                //Comunicación serial
  ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//Puerto C como entrada y pullup deshabilitado.
	DDRC=0x00;
  ee:	17 b8       	out	0x07, r1	; 7
	PORTC=0x00;
  f0:	18 b8       	out	0x08, r1	; 8
	
   // init_ADC();
   ADC_init();
  f2:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_init>
    initPWM1(compare, inv, mode, prescaler, periodo);
  f6:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <prescaler>
 102:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <prescaler+0x1>
 106:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <mode>
 10a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <inv>
 10e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <compare>
 112:	0e 94 c8 00 	call	0x190	; 0x190 <initPWM1>
    sei();
 116:	78 94       	sei
}
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <main>:
volatile uint8_t valorADC = 0;
volatile uint16_t DUT = 0;

int main()
{
    setup();
 11e:	0e 94 72 00 	call	0xe4	; 0xe4 <setup>
    
    while (1) 
    {
		DUT = DutyCycle(valorADC);
 122:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <valorADC>
 126:	0e 94 c1 00 	call	0x182	; 0x182 <DutyCycle>
 12a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 12e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		OCR1B = DUT;            // Actualizamos el duty cycle
 132:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 136:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 13a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 13e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9c e9       	ldi	r25, 0x9C	; 156
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x28>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x2e>
 14c:	00 00       	nop
 14e:	e9 cf       	rjmp	.-46     	; 0x122 <main+0x4>

00000150 <__vector_21>:
}
*/


//************Interrupciones************
ISR(ADC_vect){
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
    valorADC = ADCH;        // Leemos solo ADCH por justificación izquierda
 160:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 164:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <valorADC>
    ADCSRA |= (1<<ADSC);    // Iniciamos nueva conversión
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	80 83       	st	Z, r24
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <DutyCycle>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdint.h>

uint16_t DutyCycle(uint8_t lec_ADC){
	return (1010UL + lec_ADC * (4000UL/255));
 182:	2f e0       	ldi	r18, 0x0F	; 15
 184:	82 9f       	mul	r24, r18
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
}
 18a:	8e 50       	subi	r24, 0x0E	; 14
 18c:	9c 4f       	sbci	r25, 0xFC	; 252
 18e:	08 95       	ret

00000190 <initPWM1>:

void initPWM1(uint8_t compare, uint8_t inv, uint8_t mode, uint16_t prescaler, uint16_t periodo) {
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
	TCCR1A = 0;
 194:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 198:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	DDRB = 0;
 19c:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 19e:	15 b8       	out	0x05, r1	; 5
	
	//OCR1B
	if (compare==0){
 1a0:	81 11       	cpse	r24, r1
 1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <initPWM1+0x30>
		if (inv==0) {
 1a4:	61 11       	cpse	r22, r1
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <initPWM1+0x24>
			TCCR1A |= (1<<COM1B1);	//No invertido
 1a8:	a0 e8       	ldi	r26, 0x80	; 128
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	8c 91       	ld	r24, X
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	8c 93       	st	X, r24
 1b2:	13 c0       	rjmp	.+38     	; 0x1da <initPWM1+0x4a>
		}
		else {
			TCCR1A |= (1<<COM1B1) | (1<<COM1B0);
 1b4:	a0 e8       	ldi	r26, 0x80	; 128
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8c 91       	ld	r24, X
 1ba:	80 63       	ori	r24, 0x30	; 48
 1bc:	8c 93       	st	X, r24
 1be:	0d c0       	rjmp	.+26     	; 0x1da <initPWM1+0x4a>
		}
	}
	//OCR1A
	else {
		if (inv==0) {
 1c0:	61 11       	cpse	r22, r1
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <initPWM1+0x40>
			TCCR1A |= (1<<COM1A1);
 1c4:	a0 e8       	ldi	r26, 0x80	; 128
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	8c 91       	ld	r24, X
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	8c 93       	st	X, r24
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <initPWM1+0x4a>
		}
		else {
			TCCR1A |= (1<<COM1A1) | (1<<COM1A0);
 1d0:	a0 e8       	ldi	r26, 0x80	; 128
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	8c 91       	ld	r24, X
 1d6:	80 6c       	ori	r24, 0xC0	; 192
 1d8:	8c 93       	st	X, r24
		}
	}
	
	
	switch (mode)
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	fa 01       	movw	r30, r20
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	ef 30       	cpi	r30, 0x0F	; 15
 1e2:	f1 05       	cpc	r31, r1
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <initPWM1+0x58>
 1e6:	74 c0       	rjmp	.+232    	; 0x2d0 <initPWM1+0x140>
 1e8:	ec 5c       	subi	r30, 0xCC	; 204
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	0c 94 b2 01 	jmp	0x364	; 0x364 <__tablejump2__>
	{
		case 1:	 //PWM Phase correct 8 bits
		TCCR1A |= (1<<WGM10);						
 1f0:	e0 e8       	ldi	r30, 0x80	; 128
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	80 83       	st	Z, r24
		break;
 1fa:	74 c0       	rjmp	.+232    	; 0x2e4 <initPWM1+0x154>
		
		case 2:	//PWM Phase correct 9 bits		
		TCCR1A |= (1<<WGM11);
 1fc:	e0 e8       	ldi	r30, 0x80	; 128
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	82 60       	ori	r24, 0x02	; 2
 204:	80 83       	st	Z, r24
		break;
 206:	6e c0       	rjmp	.+220    	; 0x2e4 <initPWM1+0x154>
		
		case 3:	//PWM Phase correct 10 bits
		TCCR1A |= (1<<WGM11) | (1<<WGM10);     
 208:	e0 e8       	ldi	r30, 0x80	; 128
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	83 60       	ori	r24, 0x03	; 3
 210:	80 83       	st	Z, r24
		break;
 212:	68 c0       	rjmp	.+208    	; 0x2e4 <initPWM1+0x154>
		
		case 5:	//PWM Fast 8 bits
		TCCR1A |=  (1<<WGM10);
 214:	e0 e8       	ldi	r30, 0x80	; 128
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
 21e:	e1 e8       	ldi	r30, 0x81	; 129
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 83       	st	Z, r24
		break;
 228:	5d c0       	rjmp	.+186    	; 0x2e4 <initPWM1+0x154>
		
		case 6: //PWM Fast 9 bits
		TCCR1A |= (1<<WGM11);
 22a:	e0 e8       	ldi	r30, 0x80	; 128
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	82 60       	ori	r24, 0x02	; 2
 232:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	80 83       	st	Z, r24
		break;
 23e:	52 c0       	rjmp	.+164    	; 0x2e4 <initPWM1+0x154>
		
		case 7: //PWM Fast 10 bits
		TCCR1A |= (1<<WGM11) | (1<<WGM10);
 240:	e0 e8       	ldi	r30, 0x80	; 128
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	83 60       	ori	r24, 0x03	; 3
 248:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
 24a:	e1 e8       	ldi	r30, 0x81	; 129
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 83       	st	Z, r24
		break;
 254:	47 c0       	rjmp	.+142    	; 0x2e4 <initPWM1+0x154>
		
		case 8: //PWM Phase and frecuency correct TOP=ICR1 
		TCCR1B |= (1<<WGM13);
 256:	e1 e8       	ldi	r30, 0x81	; 129
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 61       	ori	r24, 0x10	; 16
 25e:	80 83       	st	Z, r24
		break;
 260:	41 c0       	rjmp	.+130    	; 0x2e4 <initPWM1+0x154>
		
		case 9:	//PWM Phase and frecuency correct TOP=OCR1A 
		TCCR1B |= (1<<WGM13);
 262:	e1 e8       	ldi	r30, 0x81	; 129
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 61       	ori	r24, 0x10	; 16
 26a:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10);
 26c:	e0 e8       	ldi	r30, 0x80	; 128
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	81 60       	ori	r24, 0x01	; 1
 274:	80 83       	st	Z, r24
		break;
 276:	36 c0       	rjmp	.+108    	; 0x2e4 <initPWM1+0x154>
		
		case 10: //PWM Phase correct TOP=ICR1 
		TCCR1B |= (1<<WGM13);
 278:	e1 e8       	ldi	r30, 0x81	; 129
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM11);
 282:	e0 e8       	ldi	r30, 0x80	; 128
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	80 83       	st	Z, r24
		break;
 28c:	2b c0       	rjmp	.+86     	; 0x2e4 <initPWM1+0x154>
		
		case 11: //PWM Phase correct TOP=OCR1A 
		TCCR1A |= (1<<WGM11) | (1<<WGM10);
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	83 60       	ori	r24, 0x03	; 3
 296:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM13);
 298:	e1 e8       	ldi	r30, 0x81	; 129
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 61       	ori	r24, 0x10	; 16
 2a0:	80 83       	st	Z, r24
		break;
 2a2:	20 c0       	rjmp	.+64     	; 0x2e4 <initPWM1+0x154>
		
		case 14: //PWM Fast TOP=ICR1
		TCCR1A |= (1<<WGM11);
 2a4:	e0 e8       	ldi	r30, 0x80	; 128
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
 2ae:	e1 e8       	ldi	r30, 0x81	; 129
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 61       	ori	r24, 0x18	; 24
 2b6:	80 83       	st	Z, r24
		break;
 2b8:	15 c0       	rjmp	.+42     	; 0x2e4 <initPWM1+0x154>
		
		case 15: //PWM Fast TOP=OCR1A 
		TCCR1A |= (1<<WGM11) | (1<<WGM10);
 2ba:	e0 e8       	ldi	r30, 0x80	; 128
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	83 60       	ori	r24, 0x03	; 3
 2c2:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
 2c4:	e1 e8       	ldi	r30, 0x81	; 129
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	88 61       	ori	r24, 0x18	; 24
 2cc:	80 83       	st	Z, r24
		break;
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <initPWM1+0x154>
		
		default:	
		TCCR1A |= (1<<WGM11);
 2d0:	e0 e8       	ldi	r30, 0x80	; 128
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
 2da:	e1 e8       	ldi	r30, 0x81	; 129
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	88 61       	ori	r24, 0x18	; 24
 2e2:	80 83       	st	Z, r24
		break;
	}
	
	switch (prescaler){
 2e4:	20 34       	cpi	r18, 0x40	; 64
 2e6:	31 05       	cpc	r19, r1
 2e8:	e1 f0       	breq	.+56     	; 0x322 <initPWM1+0x192>
 2ea:	38 f4       	brcc	.+14     	; 0x2fa <initPWM1+0x16a>
 2ec:	21 30       	cpi	r18, 0x01	; 1
 2ee:	31 05       	cpc	r19, r1
 2f0:	61 f0       	breq	.+24     	; 0x30a <initPWM1+0x17a>
 2f2:	28 30       	cpi	r18, 0x08	; 8
 2f4:	31 05       	cpc	r19, r1
 2f6:	79 f0       	breq	.+30     	; 0x316 <initPWM1+0x186>
 2f8:	26 c0       	rjmp	.+76     	; 0x346 <initPWM1+0x1b6>
 2fa:	21 15       	cp	r18, r1
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	38 07       	cpc	r19, r24
 300:	b1 f0       	breq	.+44     	; 0x32e <initPWM1+0x19e>
 302:	21 15       	cp	r18, r1
 304:	34 40       	sbci	r19, 0x04	; 4
 306:	c9 f0       	breq	.+50     	; 0x33a <initPWM1+0x1aa>
 308:	1e c0       	rjmp	.+60     	; 0x346 <initPWM1+0x1b6>
		case 1:
		TCCR1B |= (1<<CS10);
 30a:	e1 e8       	ldi	r30, 0x81	; 129
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	81 60       	ori	r24, 0x01	; 1
 312:	80 83       	st	Z, r24
		break;
 314:	1d c0       	rjmp	.+58     	; 0x350 <initPWM1+0x1c0>
		case 8:
		TCCR1B |= (1<<CS11);
 316:	e1 e8       	ldi	r30, 0x81	; 129
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	80 83       	st	Z, r24
		break;
 320:	17 c0       	rjmp	.+46     	; 0x350 <initPWM1+0x1c0>
		case 64:
		TCCR1B |= (1<<CS10)|(1<<CS11);
 322:	e1 e8       	ldi	r30, 0x81	; 129
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	83 60       	ori	r24, 0x03	; 3
 32a:	80 83       	st	Z, r24
		break;
 32c:	11 c0       	rjmp	.+34     	; 0x350 <initPWM1+0x1c0>
		case 256:
		TCCR1B |= (1<<CS12);
 32e:	e1 e8       	ldi	r30, 0x81	; 129
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	84 60       	ori	r24, 0x04	; 4
 336:	80 83       	st	Z, r24
		break;
 338:	0b c0       	rjmp	.+22     	; 0x350 <initPWM1+0x1c0>
		case 1024:
		TCCR1B |= (1<<CS10)|(1<<CS12);
 33a:	e1 e8       	ldi	r30, 0x81	; 129
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	85 60       	ori	r24, 0x05	; 5
 342:	80 83       	st	Z, r24
		break;
 344:	05 c0       	rjmp	.+10     	; 0x350 <initPWM1+0x1c0>
		default:
		TCCR1B &= ~((1<<CS10)|(1<<CS12)|(1<<CS11));
 346:	e1 e8       	ldi	r30, 0x81	; 129
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	88 7f       	andi	r24, 0xF8	; 248
 34e:	80 83       	st	Z, r24
	// Prescaler de 1024 (Frecuencia PWM = 50Hz)
	TCCR1B |= (1<<CS11);
	//OCR1B =1010;
	//OCR1B =4990;*/
	
	ICR1 = periodo;   // TOP value para 50Hz
 350:	10 93 87 00 	sts	0x0087, r17	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 354:	00 93 86 00 	sts	0x0086, r16	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	DDRB |= (1 << DDB2)|(1 << DDB3)|(1 << DDB1);  // Configura PB2 (OC1B) como salida
 358:	84 b1       	in	r24, 0x04	; 4
 35a:	8e 60       	ori	r24, 0x0E	; 14
 35c:	84 b9       	out	0x04, r24	; 4
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <__tablejump2__>:
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	05 90       	lpm	r0, Z+
 36a:	f4 91       	lpm	r31, Z
 36c:	e0 2d       	mov	r30, r0
 36e:	09 94       	ijmp

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
