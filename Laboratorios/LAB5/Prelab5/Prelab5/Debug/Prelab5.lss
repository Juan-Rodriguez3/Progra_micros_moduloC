
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000532  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a36  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080e  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ee  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000298  00000000  00000000  0000257e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_21>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	c2 00       	.word	0x00c2	; ????
  6a:	93 00       	.word	0x0093	; ????
  6c:	99 00       	.word	0x0099	; ????
  6e:	9f 00       	.word	0x009f	; ????
  70:	a5 00       	.word	0x00a5	; ????
  72:	ab 00       	.word	0x00ab	; ????
  74:	b1 00       	.word	0x00b1	; ????
  76:	b7 00       	.word	0x00b7	; ????
  78:	d7 01       	movw	r26, r14
  7a:	dd 01       	movw	r26, r26
  7c:	e3 01       	movw	r28, r6
  7e:	47 02       	muls	r20, r23
  80:	e9 01       	movw	r28, r18
  82:	f4 01       	movw	r30, r8
  84:	ff 01       	movw	r30, r30
  86:	0a 02       	muls	r16, r26
  88:	10 02       	muls	r17, r16
  8a:	1b 02       	muls	r17, r27
  8c:	26 02       	muls	r18, r22
  8e:	47 02       	muls	r20, r23
  90:	47 02       	muls	r20, r23
  92:	31 02       	muls	r19, r17
  94:	3c 02       	muls	r19, r28

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	e2 e3       	ldi	r30, 0x32	; 50
  aa:	f5 e0       	ldi	r31, 0x05	; 5
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a8 30       	cpi	r26, 0x08	; 8
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a8 e0       	ldi	r26, 0x08	; 8
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ab 30       	cpi	r26, 0x0B	; 11
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 34 01 	call	0x268	; 0x268 <main>
  cc:	0c 94 97 02 	jmp	0x52e	; 0x52e <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <ADC_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdint.h>

void ADC_init(uint8_t justi, uint8_t V_ref, uint8_t canal, uint8_t interrupt, uint8_t prescaler){
  d4:	0f 93       	push	r16
	ADMUX = 0;
  d6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	if (!justi){
  da:	81 11       	cpse	r24, r1
  dc:	06 c0       	rjmp	.+12     	; 0xea <ADC_init+0x16>
		ADMUX &= ~(1<<ADLAR);
  de:	ac e7       	ldi	r26, 0x7C	; 124
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	8f 7d       	andi	r24, 0xDF	; 223
  e6:	8c 93       	st	X, r24
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <ADC_init+0x20>
	}
	else {
		ADMUX |= (1<<ADLAR);
  ea:	ac e7       	ldi	r26, 0x7C	; 124
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	8c 91       	ld	r24, X
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	8c 93       	st	X, r24
	}
	
	switch (V_ref){
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	19 f0       	breq	.+6      	; 0xfe <ADC_init+0x2a>
  f8:	65 30       	cpi	r22, 0x05	; 5
  fa:	39 f0       	breq	.+14     	; 0x10a <ADC_init+0x36>
  fc:	0b c0       	rjmp	.+22     	; 0x114 <ADC_init+0x40>
		case 1:
		ADMUX |= (1<<REFS0)|(1<<REFS1);
  fe:	ac e7       	ldi	r26, 0x7C	; 124
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	8c 91       	ld	r24, X
 104:	80 6c       	ori	r24, 0xC0	; 192
 106:	8c 93       	st	X, r24
		break;
 108:	05 c0       	rjmp	.+10     	; 0x114 <ADC_init+0x40>
		case 5:
		ADMUX |= (1<<REFS0);
 10a:	ac e7       	ldi	r26, 0x7C	; 124
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	8c 91       	ld	r24, X
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8c 93       	st	X, r24
		default:
		break;
	}
	
	switch(canal){
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	48 30       	cpi	r20, 0x08	; 8
 118:	51 05       	cpc	r21, r1
 11a:	78 f5       	brcc	.+94     	; 0x17a <ADC_init+0xa6>
 11c:	fa 01       	movw	r30, r20
 11e:	ec 5c       	subi	r30, 0xCC	; 204
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	0c 94 91 02 	jmp	0x522	; 0x522 <__tablejump2__>
		case 0:
		break;
		case 1:
		ADMUX |= (1<<MUX0);
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
		break;
 130:	29 c0       	rjmp	.+82     	; 0x184 <ADC_init+0xb0>
		case 2:
		ADMUX |= (1<<MUX1);
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	80 83       	st	Z, r24
		break;
 13c:	23 c0       	rjmp	.+70     	; 0x184 <ADC_init+0xb0>
		case 3:
		ADMUX |= (1<<MUX0)|(1<<MUX1);
 13e:	ec e7       	ldi	r30, 0x7C	; 124
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	83 60       	ori	r24, 0x03	; 3
 146:	80 83       	st	Z, r24
		break;
 148:	1d c0       	rjmp	.+58     	; 0x184 <ADC_init+0xb0>
		case 4:
		ADMUX |= (1<<MUX2);
 14a:	ec e7       	ldi	r30, 0x7C	; 124
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	84 60       	ori	r24, 0x04	; 4
 152:	80 83       	st	Z, r24
		break;
 154:	17 c0       	rjmp	.+46     	; 0x184 <ADC_init+0xb0>
		case 5:
		ADMUX |= (1<<MUX0)|(1<<MUX2);
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	85 60       	ori	r24, 0x05	; 5
 15e:	80 83       	st	Z, r24
		break;
 160:	11 c0       	rjmp	.+34     	; 0x184 <ADC_init+0xb0>
		case 6:
		ADMUX |= (1<<MUX2)|(1<<MUX1);
 162:	ec e7       	ldi	r30, 0x7C	; 124
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	86 60       	ori	r24, 0x06	; 6
 16a:	80 83       	st	Z, r24
		break;
 16c:	0b c0       	rjmp	.+22     	; 0x184 <ADC_init+0xb0>
		case 7:
		ADMUX |= (1<<MUX0)|(1<<MUX1)|(1<<MUX2);
 16e:	ec e7       	ldi	r30, 0x7C	; 124
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	87 60       	ori	r24, 0x07	; 7
 176:	80 83       	st	Z, r24
		break;
 178:	05 c0       	rjmp	.+10     	; 0x184 <ADC_init+0xb0>
		default:
		ADMUX |= (1<<MUX2)|(1<<MUX1);
 17a:	ec e7       	ldi	r30, 0x7C	; 124
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	86 60       	ori	r24, 0x06	; 6
 182:	80 83       	st	Z, r24
		break;
	}
		//ADMUX |= (1<<REFS0)|(1<<ADLAR);    // 5V de referencia - Justificación a la izquierda - canal 0
	
	ADCSRA = 0;
 184:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	if (!interrupt){
 188:	21 11       	cpse	r18, r1
 18a:	06 c0       	rjmp	.+12     	; 0x198 <ADC_init+0xc4>
		ADCSRA &= ~(1<<ADIE);
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	87 7f       	andi	r24, 0xF7	; 247
 194:	80 83       	st	Z, r24
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <ADC_init+0xce>
	}
	else {
		ADCSRA |= (1<<ADIE);	//	Habilitar interrupciones
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	80 83       	st	Z, r24
	}
	
	switch (prescaler){
 1a2:	00 31       	cpi	r16, 0x10	; 16
 1a4:	d9 f0       	breq	.+54     	; 0x1dc <ADC_init+0x108>
 1a6:	38 f4       	brcc	.+14     	; 0x1b6 <ADC_init+0xe2>
 1a8:	04 30       	cpi	r16, 0x04	; 4
 1aa:	61 f0       	breq	.+24     	; 0x1c4 <ADC_init+0xf0>
 1ac:	08 30       	cpi	r16, 0x08	; 8
 1ae:	81 f0       	breq	.+32     	; 0x1d0 <ADC_init+0xfc>
 1b0:	02 30       	cpi	r16, 0x02	; 2
 1b2:	61 f5       	brne	.+88     	; 0x20c <ADC_init+0x138>
 1b4:	30 c0       	rjmp	.+96     	; 0x216 <ADC_init+0x142>
 1b6:	00 34       	cpi	r16, 0x40	; 64
 1b8:	e9 f0       	breq	.+58     	; 0x1f4 <ADC_init+0x120>
 1ba:	00 38       	cpi	r16, 0x80	; 128
 1bc:	09 f1       	breq	.+66     	; 0x200 <ADC_init+0x12c>
 1be:	00 32       	cpi	r16, 0x20	; 32
 1c0:	29 f5       	brne	.+74     	; 0x20c <ADC_init+0x138>
 1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <ADC_init+0x114>
		case 2:
		break;
		case 4:
		ADCSRA |= (1<<ADPS1);
 1c4:	ea e7       	ldi	r30, 0x7A	; 122
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	80 83       	st	Z, r24
		break;
 1ce:	23 c0       	rjmp	.+70     	; 0x216 <ADC_init+0x142>
		case 8:
		ADCSRA |= (1<<ADPS1)|(1<<ADPS0);
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	83 60       	ori	r24, 0x03	; 3
 1d8:	80 83       	st	Z, r24
		break;
 1da:	1d c0       	rjmp	.+58     	; 0x216 <ADC_init+0x142>
		case 16:
		ADCSRA |= (1<<ADPS2);
 1dc:	ea e7       	ldi	r30, 0x7A	; 122
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	80 83       	st	Z, r24
		break;
 1e6:	17 c0       	rjmp	.+46     	; 0x216 <ADC_init+0x142>
		case 32:
		ADCSRA |= (1<<ADPS2)| (1<<ADPS0);
 1e8:	ea e7       	ldi	r30, 0x7A	; 122
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	85 60       	ori	r24, 0x05	; 5
 1f0:	80 83       	st	Z, r24
		break;
 1f2:	11 c0       	rjmp	.+34     	; 0x216 <ADC_init+0x142>
		case 64:
		ADCSRA |= (1<<ADPS1) |(1<<ADPS2);
 1f4:	ea e7       	ldi	r30, 0x7A	; 122
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	86 60       	ori	r24, 0x06	; 6
 1fc:	80 83       	st	Z, r24
		break;
 1fe:	0b c0       	rjmp	.+22     	; 0x216 <ADC_init+0x142>
		case 128:
		ADCSRA |= (1<<ADPS1)|(1<<ADPS0)|(1<<ADPS2);
 200:	ea e7       	ldi	r30, 0x7A	; 122
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	87 60       	ori	r24, 0x07	; 7
 208:	80 83       	st	Z, r24
		break;
 20a:	05 c0       	rjmp	.+10     	; 0x216 <ADC_init+0x142>
		default:
		ADCSRA |= (1<<ADPS1)|(1<<ADPS0)|(1<<ADPS2);
 20c:	ea e7       	ldi	r30, 0x7A	; 122
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	87 60       	ori	r24, 0x07	; 7
 214:	80 83       	st	Z, r24
		break;
	}
	
	
	//ADCSRA |= (1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Interrupciones - Prescaler 128
	ADCSRA |= (1<<ADEN)|(1<<ADSC); //Habilitar ADC e iniciar conversión
 216:	ea e7       	ldi	r30, 0x7A	; 122
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 6c       	ori	r24, 0xC0	; 192
 21e:	80 83       	st	Z, r24
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <setup>:
}

//************Funciones************


void setup(){
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
    cli();
 228:	f8 94       	cli
    //CLKPR = (1<< CLKPCE);
    //CLKPR |= (1<<CLKPS2);    //1Mhz
    
    UCSR0B = 0;                //Comunicación serial
 22a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//Puerto C como entrada y pullup deshabilitado.
	DDRC=0x00;
 22e:	17 b8       	out	0x07, r1	; 7
	PORTC=0x00;
 230:	18 b8       	out	0x08, r1	; 8
	initPWM1(1, 0, mode_PWM, prescaler_PWM, periodo);
 232:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <periodo>
 236:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <periodo+0x1>
 23a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <prescaler_PWM>
 23e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <prescaler_PWM+0x1>
 242:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <mode_PWM>
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 95 01 	call	0x32a	; 0x32a <initPWM1>
	ADC_init(1,5,canal_ADC,1,prescaler_ADC);
 24e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 252:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <prescaler_ADC>
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	65 e0       	ldi	r22, 0x05	; 5
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_init>

    sei();
 260:	78 94       	sei
}
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <main>:
volatile uint8_t valorADC = 0;
volatile uint16_t DUT = 0;

int main()
{
    setup();
 268:	0e 94 12 01 	call	0x224	; 0x224 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0x8>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0xe>
 276:	00 00       	nop
 278:	f9 cf       	rjmp	.-14     	; 0x26c <main+0x4>

0000027a <__vector_21>:
    sei();
}


//************Interrupciones************
ISR(ADC_vect){
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0f 93       	push	r16
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	
	//Actualizamos el valor del Dutty cycle
    valorADC = ADCH;        // Leemos solo ADCH por justificación izquierda
 29e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <valorADC>
	DUT = DutyCycle(valorADC);
 2a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <valorADC>
 2aa:	0e 94 8e 01 	call	0x31c	; 0x31c <DutyCycle>
 2ae:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 2b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	switch(canal_ADC){
 2b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ba:	88 23       	and	r24, r24
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <__vector_21+0x4a>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	51 f0       	breq	.+20     	; 0x2d6 <__vector_21+0x5c>
 2c2:	11 c0       	rjmp	.+34     	; 0x2e6 <__vector_21+0x6c>
		case 0:
		OCR1B = DUT;            // Actualizamos el duty cycle 
 2c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2c8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2cc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2d0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		break;
 2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <__vector_21+0x6c>
		case 1:
		OCR1A = DUT;			// Actualizamos el duty cycle
 2d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2da:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
		default:
		break;
	}
	ADC_init(1,5,canal_ADC,1,prescaler_ADC);
 2e6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ea:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <prescaler_ADC>
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	65 e0       	ldi	r22, 0x05	; 5
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_init>
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 91       	pop	r16
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <DutyCycle>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdint.h>

uint16_t DutyCycle(uint8_t lec_ADC){
	return (1010UL + lec_ADC * (4000UL/255));
 31c:	2f e0       	ldi	r18, 0x0F	; 15
 31e:	82 9f       	mul	r24, r18
 320:	c0 01       	movw	r24, r0
 322:	11 24       	eor	r1, r1
}
 324:	8e 50       	subi	r24, 0x0E	; 14
 326:	9c 4f       	sbci	r25, 0xFC	; 252
 328:	08 95       	ret

0000032a <initPWM1>:

void initPWM1(uint8_t compare, uint8_t inv, uint8_t mode, uint16_t prescaler, uint16_t periodo) {
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
	TCCR1A = 0;
 32e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 332:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	DDRB = 0;
 336:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 338:	15 b8       	out	0x05, r1	; 5
	
	//OCR1B
	if (compare==0){
 33a:	81 11       	cpse	r24, r1
 33c:	0e c0       	rjmp	.+28     	; 0x35a <initPWM1+0x30>
		if (inv==0) {
 33e:	61 11       	cpse	r22, r1
 340:	06 c0       	rjmp	.+12     	; 0x34e <initPWM1+0x24>
			TCCR1A |= (1<<COM1B1);	//No invertido
 342:	a0 e8       	ldi	r26, 0x80	; 128
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	8c 91       	ld	r24, X
 348:	80 62       	ori	r24, 0x20	; 32
 34a:	8c 93       	st	X, r24
 34c:	25 c0       	rjmp	.+74     	; 0x398 <initPWM1+0x6e>
		}
		else {
			TCCR1A |= (1<<COM1B1) | (1<<COM1B0); 
 34e:	a0 e8       	ldi	r26, 0x80	; 128
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	8c 91       	ld	r24, X
 354:	80 63       	ori	r24, 0x30	; 48
 356:	8c 93       	st	X, r24
 358:	1f c0       	rjmp	.+62     	; 0x398 <initPWM1+0x6e>
		}
	}
	//OCR1A
	else if (compare==1) {
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	71 f4       	brne	.+28     	; 0x37a <initPWM1+0x50>
		if (inv==0) {
 35e:	61 11       	cpse	r22, r1
 360:	06 c0       	rjmp	.+12     	; 0x36e <initPWM1+0x44>
			TCCR1A |= (1<<COM1A1);
 362:	a0 e8       	ldi	r26, 0x80	; 128
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	8c 91       	ld	r24, X
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	8c 93       	st	X, r24
 36c:	15 c0       	rjmp	.+42     	; 0x398 <initPWM1+0x6e>
		}
		else {
			TCCR1A |= (1<<COM1A1) | (1<<COM1A0);
 36e:	a0 e8       	ldi	r26, 0x80	; 128
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	8c 91       	ld	r24, X
 374:	80 6c       	ori	r24, 0xC0	; 192
 376:	8c 93       	st	X, r24
 378:	0f c0       	rjmp	.+30     	; 0x398 <initPWM1+0x6e>
		}
	}
	//Esta es util para inicializar el timer1 con las dos señales PWM 
	else if (compare==2){
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	69 f4       	brne	.+26     	; 0x398 <initPWM1+0x6e>
		if (inv==0) {
 37e:	61 11       	cpse	r22, r1
 380:	06 c0       	rjmp	.+12     	; 0x38e <initPWM1+0x64>
			TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
 382:	a0 e8       	ldi	r26, 0x80	; 128
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	8c 91       	ld	r24, X
 388:	80 6a       	ori	r24, 0xA0	; 160
 38a:	8c 93       	st	X, r24
 38c:	05 c0       	rjmp	.+10     	; 0x398 <initPWM1+0x6e>
		}
		else {
			TCCR1A |= (1<<COM1A1) | (1<<COM1A0)|(1<<COM1B1) | (1<<COM1B0);
 38e:	a0 e8       	ldi	r26, 0x80	; 128
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	8c 91       	ld	r24, X
 394:	80 6f       	ori	r24, 0xF0	; 240
 396:	8c 93       	st	X, r24
		}
	}
	
	
	
	switch (mode)
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	fa 01       	movw	r30, r20
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	ef 30       	cpi	r30, 0x0F	; 15
 3a0:	f1 05       	cpc	r31, r1
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <initPWM1+0x7c>
 3a4:	74 c0       	rjmp	.+232    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 3a6:	e4 5c       	subi	r30, 0xC4	; 196
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	0c 94 91 02 	jmp	0x522	; 0x522 <__tablejump2__>
	{
		case 1:	 //PWM Phase correct 8 bits
		TCCR1A |= (1<<WGM10);						
 3ae:	e0 e8       	ldi	r30, 0x80	; 128
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	80 83       	st	Z, r24
		break;
 3b8:	74 c0       	rjmp	.+232    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 2:	//PWM Phase correct 9 bits		
		TCCR1A |= (1<<WGM11);
 3ba:	e0 e8       	ldi	r30, 0x80	; 128
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	82 60       	ori	r24, 0x02	; 2
 3c2:	80 83       	st	Z, r24
		break;
 3c4:	6e c0       	rjmp	.+220    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 3:	//PWM Phase correct 10 bits
		TCCR1A |= (1<<WGM11) | (1<<WGM10);     
 3c6:	e0 e8       	ldi	r30, 0x80	; 128
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	83 60       	ori	r24, 0x03	; 3
 3ce:	80 83       	st	Z, r24
		break;
 3d0:	68 c0       	rjmp	.+208    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 5:	//PWM Fast 8 bits
		TCCR1A |=  (1<<WGM10);
 3d2:	e0 e8       	ldi	r30, 0x80	; 128
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
 3dc:	e1 e8       	ldi	r30, 0x81	; 129
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	80 83       	st	Z, r24
		break;
 3e6:	5d c0       	rjmp	.+186    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 6: //PWM Fast 9 bits
		TCCR1A |= (1<<WGM11);
 3e8:	e0 e8       	ldi	r30, 0x80	; 128
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
 3f2:	e1 e8       	ldi	r30, 0x81	; 129
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	88 60       	ori	r24, 0x08	; 8
 3fa:	80 83       	st	Z, r24
		break;
 3fc:	52 c0       	rjmp	.+164    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 7: //PWM Fast 10 bits
		TCCR1A |= (1<<WGM11) | (1<<WGM10);
 3fe:	e0 e8       	ldi	r30, 0x80	; 128
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	83 60       	ori	r24, 0x03	; 3
 406:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12);
 408:	e1 e8       	ldi	r30, 0x81	; 129
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	88 60       	ori	r24, 0x08	; 8
 410:	80 83       	st	Z, r24
		break;
 412:	47 c0       	rjmp	.+142    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 8: //PWM Phase and frecuency correct TOP=ICR1 
		TCCR1B |= (1<<WGM13);
 414:	e1 e8       	ldi	r30, 0x81	; 129
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	80 61       	ori	r24, 0x10	; 16
 41c:	80 83       	st	Z, r24
		break;
 41e:	41 c0       	rjmp	.+130    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 9:	//PWM Phase and frecuency correct TOP=OCR1A 
		TCCR1B |= (1<<WGM13);
 420:	e1 e8       	ldi	r30, 0x81	; 129
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	80 61       	ori	r24, 0x10	; 16
 428:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10);
 42a:	e0 e8       	ldi	r30, 0x80	; 128
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	81 60       	ori	r24, 0x01	; 1
 432:	80 83       	st	Z, r24
		break;
 434:	36 c0       	rjmp	.+108    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 10: //PWM Phase correct TOP=ICR1 
		TCCR1B |= (1<<WGM13);
 436:	e1 e8       	ldi	r30, 0x81	; 129
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	80 61       	ori	r24, 0x10	; 16
 43e:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM11);
 440:	e0 e8       	ldi	r30, 0x80	; 128
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	82 60       	ori	r24, 0x02	; 2
 448:	80 83       	st	Z, r24
		break;
 44a:	2b c0       	rjmp	.+86     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 11: //PWM Phase correct TOP=OCR1A 
		TCCR1A |= (1<<WGM11) | (1<<WGM10);
 44c:	e0 e8       	ldi	r30, 0x80	; 128
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	83 60       	ori	r24, 0x03	; 3
 454:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM13);
 456:	e1 e8       	ldi	r30, 0x81	; 129
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	80 61       	ori	r24, 0x10	; 16
 45e:	80 83       	st	Z, r24
		break;
 460:	20 c0       	rjmp	.+64     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 14: //PWM Fast TOP=ICR1
		TCCR1A |= (1<<WGM11);
 462:	e0 e8       	ldi	r30, 0x80	; 128
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
 46c:	e1 e8       	ldi	r30, 0x81	; 129
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	88 61       	ori	r24, 0x18	; 24
 474:	80 83       	st	Z, r24
		break;
 476:	15 c0       	rjmp	.+42     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		case 15: //PWM Fast TOP=OCR1A 
		TCCR1A |= (1<<WGM11) | (1<<WGM10);
 478:	e0 e8       	ldi	r30, 0x80	; 128
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	83 60       	ori	r24, 0x03	; 3
 480:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
 482:	e1 e8       	ldi	r30, 0x81	; 129
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	88 61       	ori	r24, 0x18	; 24
 48a:	80 83       	st	Z, r24
		break;
 48c:	0a c0       	rjmp	.+20     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		
		default:	
		TCCR1A |= (1<<WGM11);
 48e:	e0 e8       	ldi	r30, 0x80	; 128
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	82 60       	ori	r24, 0x02	; 2
 496:	80 83       	st	Z, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
 498:	e1 e8       	ldi	r30, 0x81	; 129
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	88 61       	ori	r24, 0x18	; 24
 4a0:	80 83       	st	Z, r24
		break;
	}
	
	switch (prescaler){
 4a2:	20 34       	cpi	r18, 0x40	; 64
 4a4:	31 05       	cpc	r19, r1
 4a6:	e1 f0       	breq	.+56     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4a8:	38 f4       	brcc	.+14     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4aa:	21 30       	cpi	r18, 0x01	; 1
 4ac:	31 05       	cpc	r19, r1
 4ae:	61 f0       	breq	.+24     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4b0:	28 30       	cpi	r18, 0x08	; 8
 4b2:	31 05       	cpc	r19, r1
 4b4:	79 f0       	breq	.+30     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4b6:	26 c0       	rjmp	.+76     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4b8:	21 15       	cp	r18, r1
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	38 07       	cpc	r19, r24
 4be:	b1 f0       	breq	.+44     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4c0:	21 15       	cp	r18, r1
 4c2:	34 40       	sbci	r19, 0x04	; 4
 4c4:	c9 f0       	breq	.+50     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4c6:	1e c0       	rjmp	.+60     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		case 1:
		TCCR1B |= (1<<CS10);
 4c8:	e1 e8       	ldi	r30, 0x81	; 129
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	81 60       	ori	r24, 0x01	; 1
 4d0:	80 83       	st	Z, r24
		break;
 4d2:	1d c0       	rjmp	.+58     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		case 8:
		TCCR1B |= (1<<CS11);
 4d4:	e1 e8       	ldi	r30, 0x81	; 129
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	82 60       	ori	r24, 0x02	; 2
 4dc:	80 83       	st	Z, r24
		break;
 4de:	17 c0       	rjmp	.+46     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		case 64:
		TCCR1B |= (1<<CS10)|(1<<CS11);
 4e0:	e1 e8       	ldi	r30, 0x81	; 129
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	83 60       	ori	r24, 0x03	; 3
 4e8:	80 83       	st	Z, r24
		break;
 4ea:	11 c0       	rjmp	.+34     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		case 256:
		TCCR1B |= (1<<CS12);
 4ec:	e1 e8       	ldi	r30, 0x81	; 129
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	84 60       	ori	r24, 0x04	; 4
 4f4:	80 83       	st	Z, r24
		break;
 4f6:	0b c0       	rjmp	.+22     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		case 1024:
		TCCR1B |= (1<<CS10)|(1<<CS12);
 4f8:	e1 e8       	ldi	r30, 0x81	; 129
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	85 60       	ori	r24, 0x05	; 5
 500:	80 83       	st	Z, r24
		break;
 502:	05 c0       	rjmp	.+10     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
		default:
		TCCR1B &= ~((1<<CS10)|(1<<CS12)|(1<<CS11));
 504:	e1 e8       	ldi	r30, 0x81	; 129
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	88 7f       	andi	r24, 0xF8	; 248
 50c:	80 83       	st	Z, r24
	// Prescaler de 1024 (Frecuencia PWM = 50Hz)
	TCCR1B |= (1<<CS11);
	//OCR1B =1010;
	//OCR1B =4990;*/
	
	ICR1 = periodo;   // TOP value para 50Hz
 50e:	10 93 87 00 	sts	0x0087, r17	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 512:	00 93 86 00 	sts	0x0086, r16	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	DDRB |= (1 << DDB2)|(1 << DDB3)|(1 << DDB1);  // Configura PB2 (OC1B) como salida
 516:	84 b1       	in	r24, 0x04	; 4
 518:	8e 60       	ori	r24, 0x0E	; 14
 51a:	84 b9       	out	0x04, r24	; 4
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <__tablejump2__>:
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	05 90       	lpm	r0, Z+
 528:	f4 91       	lpm	r31, Z
 52a:	e0 2d       	mov	r30, r0
 52c:	09 94       	ijmp

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
