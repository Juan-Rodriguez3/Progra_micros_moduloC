
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000876  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000761  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003dc  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 65 00 	call	0xca	; 0xca <main>
  88:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	initPWM1();
	sei();
}

void initADC(){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(1<<ADLAR);	// 5V de referencia - Justificación a la izquierda
  96:	80 81       	ld	r24, Z
  98:	80 66       	ori	r24, 0x60	; 96
  9a:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS1)|(1<<ADPS0); //Habilitación de ADC y interrupción - Prescaler para 125 Khz 
  a2:	80 81       	ld	r24, Z
  a4:	8b 68       	ori	r24, 0x8B	; 139
  a6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Iniciar conversión
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <setup>:
		
    }
}
//************Funciones************
void setup(){
	cli();
  b0:	f8 94       	cli
	//CLKPR = (1<< CLKPCE);
	//CLKPR |= (1<<CLKPS2);	//1Mhz
	DDRB |= (1 << PORTB1);	//PB1 como salida
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB= 0x00;	
  b8:	15 b8       	out	0x05, r1	; 5
	
	UCSR0B = 0;				//Comunicación serial
  ba:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
  be:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWM1();
  c2:	0e 94 b3 00 	call	0x166	; 0x166 <initPWM1>
	sei();
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <main>:
uint8_t valorADC=0;
uint16_t DUT;

int main()
{
    setup();
  ca:	0e 94 58 00 	call	0xb0	; 0xb0 <setup>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x4>

000000d0 <__vector_21>:



//************Interrupciones************

ISR(ADC_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	valorADC = ADCH;
  f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	DUT=DutyCycle(valorADC);
  fa:	0e 94 a3 00 	call	0x146	; 0x146 <DutyCycle>
  fe:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <DUT+0x1>
 102:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <DUT>
	OCR1A=DUT;
 106:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 10a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	ADCSRA |= (1<<ADSC);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <__vector_21+0x4c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_21+0x52>
 122:	00 00       	nop
	_delay_ms(1);
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <DutyCycle>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdint.h>

int DutyCycle(uint8_t lec_ADC){
	return (lec_ADC* 239UL /255UL + 69UL);
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	af ee       	ldi	r26, 0xEF	; 239
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__umulhisi3>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodsi4>
}
 15e:	c9 01       	movw	r24, r18
 160:	8b 5b       	subi	r24, 0xBB	; 187
 162:	9f 4f       	sbci	r25, 0xFF	; 255
 164:	08 95       	ret

00000166 <initPWM1>:

void initPWM1(){
	TCCR1A = 0;
 166:	a0 e8       	ldi	r26, 0x80	; 128
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	1c 92       	st	X, r1
	TCCR1B = 0;
 16c:	e1 e8       	ldi	r30, 0x81	; 129
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	10 82       	st	Z, r1
	TCCR1A |= (1<<COM1A1) ; //Modo non-invertido
 172:	8c 91       	ld	r24, X
 174:	80 68       	ori	r24, 0x80	; 128
 176:	8c 93       	st	X, r24
	
	//Modo FAST PWM con TOP en ICR1
	TCCR1A |= (1<<WGM11);
 178:	8c 91       	ld	r24, X
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13);
 17e:	80 81       	ld	r24, Z
 180:	88 61       	ori	r24, 0x18	; 24
 182:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS11);	//Prescaler de 8
 184:	80 81       	ld	r24, Z
 186:	82 60       	ori	r24, 0x02	; 2
 188:	80 83       	st	Z, r24
	OCR1A=115;
 18a:	83 e7       	ldi	r24, 0x73	; 115
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 192:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	//OCR1A=245;
	ICR1= 2499; //TOP
 196:	83 ec       	ldi	r24, 0xC3	; 195
 198:	99 e0       	ldi	r25, 0x09	; 9
 19a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 19e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1a2:	08 95       	ret

000001a4 <__udivmodsi4>:
 1a4:	a1 e2       	ldi	r26, 0x21	; 33
 1a6:	1a 2e       	mov	r1, r26
 1a8:	aa 1b       	sub	r26, r26
 1aa:	bb 1b       	sub	r27, r27
 1ac:	fd 01       	movw	r30, r26
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <__udivmodsi4_ep>

000001b0 <__udivmodsi4_loop>:
 1b0:	aa 1f       	adc	r26, r26
 1b2:	bb 1f       	adc	r27, r27
 1b4:	ee 1f       	adc	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	e4 07       	cpc	r30, r20
 1be:	f5 07       	cpc	r31, r21
 1c0:	20 f0       	brcs	.+8      	; 0x1ca <__udivmodsi4_ep>
 1c2:	a2 1b       	sub	r26, r18
 1c4:	b3 0b       	sbc	r27, r19
 1c6:	e4 0b       	sbc	r30, r20
 1c8:	f5 0b       	sbc	r31, r21

000001ca <__udivmodsi4_ep>:
 1ca:	66 1f       	adc	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	88 1f       	adc	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	1a 94       	dec	r1
 1d4:	69 f7       	brne	.-38     	; 0x1b0 <__udivmodsi4_loop>
 1d6:	60 95       	com	r22
 1d8:	70 95       	com	r23
 1da:	80 95       	com	r24
 1dc:	90 95       	com	r25
 1de:	9b 01       	movw	r18, r22
 1e0:	ac 01       	movw	r20, r24
 1e2:	bd 01       	movw	r22, r26
 1e4:	cf 01       	movw	r24, r30
 1e6:	08 95       	ret

000001e8 <__umulhisi3>:
 1e8:	a2 9f       	mul	r26, r18
 1ea:	b0 01       	movw	r22, r0
 1ec:	b3 9f       	mul	r27, r19
 1ee:	c0 01       	movw	r24, r0
 1f0:	a3 9f       	mul	r26, r19
 1f2:	70 0d       	add	r23, r0
 1f4:	81 1d       	adc	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	91 1d       	adc	r25, r1
 1fa:	b2 9f       	mul	r27, r18
 1fc:	70 0d       	add	r23, r0
 1fe:	81 1d       	adc	r24, r1
 200:	11 24       	eor	r1, r1
 202:	91 1d       	adc	r25, r1
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
