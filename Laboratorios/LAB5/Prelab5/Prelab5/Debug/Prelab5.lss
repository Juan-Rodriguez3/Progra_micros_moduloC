
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000027e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000882  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000771  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d1  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  88:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
    initPWM1();
    sei();
}

void initADC(){
    ADMUX = 1;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	80 83       	st	Z, r24
    ADMUX |= (1<<REFS0)|(1<<ADLAR);    // 5V de referencia - Justificación a la izquierda
  98:	80 81       	ld	r24, Z
  9a:	80 66       	ori	r24, 0x60	; 96
  9c:	80 83       	st	Z, r24
    
    ADCSRA = 0;
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
    ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler 128
  a4:	80 81       	ld	r24, Z
  a6:	8f 68       	ori	r24, 0x8F	; 143
  a8:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADSC); //Iniciar conversión
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <setup>:
    }
}

//************Funciones************
void setup(){
    cli();
  b2:	f8 94       	cli
    //CLKPR = (1<< CLKPCE);
    //CLKPR |= (1<<CLKPS2);    //1Mhz
    
    UCSR0B = 0;                //Comunicación serial
  b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    initADC();
  b8:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
    initPWM1();
  bc:	0e 94 b6 00 	call	0x16c	; 0x16c <initPWM1>
    sei();
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <main>:
volatile uint8_t valorADC = 0;
volatile uint16_t DUT = 0;

int main()
{
    setup();
  c4:	0e 94 59 00 	call	0xb2	; 0xb2 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9c e9       	ldi	r25, 0x9C	; 156
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x8>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0xe>
  d2:	00 00       	nop
  d4:	f9 cf       	rjmp	.-14     	; 0xc8 <main+0x4>

000000d6 <__vector_21>:
}



//************Interrupciones************
ISR(ADC_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
    valorADC = ADCH;        // Leemos solo ADCH por justificación izquierda
  f8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valorADC>
    DUT = DutyCycle(valorADC);
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <valorADC>
 104:	0e 94 a6 00 	call	0x14c	; 0x14c <DutyCycle>
 108:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    OCR1B = DUT;            // Actualizamos el duty cycle
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 118:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    ADCSRA |= (1<<ADSC);    // Iniciamos nueva conversión
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	80 83       	st	Z, r24
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <DutyCycle>:
#include <util/delay.h>
#include <stdint.h>

uint16_t DutyCycle(uint8_t lec_ADC){
	
	return (1000 + lec_ADC * 4000UL / 1023);
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	a0 ea       	ldi	r26, 0xA0	; 160
 152:	bf e0       	ldi	r27, 0x0F	; 15
 154:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__umulhisi3>
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	33 e0       	ldi	r19, 0x03	; 3
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodsi4>
}
 164:	c9 01       	movw	r24, r18
 166:	88 51       	subi	r24, 0x18	; 24
 168:	9c 4f       	sbci	r25, 0xFC	; 252
 16a:	08 95       	ret

0000016c <initPWM1>:

void initPWM1() {
	TCCR1A = 0;
 16c:	a0 e8       	ldi	r26, 0x80	; 128
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	1c 92       	st	X, r1
	TCCR1B = 0;
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	10 82       	st	Z, r1
	
	// Configuración para PWM en OC1B (PB2)
	TCCR1A |= (1 << COM1B1);  // PWM no-invertido
 178:	8c 91       	ld	r24, X
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8c 93       	st	X, r24
	
	// Modo Fast PWM con TOP en ICR1 (Modo 14)
	TCCR1A |= (1 << WGM11);
 17e:	8c 91       	ld	r24, X
 180:	82 60       	ori	r24, 0x02	; 2
 182:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 184:	80 81       	ld	r24, Z
 186:	88 61       	ori	r24, 0x18	; 24
 188:	80 83       	st	Z, r24
	
	// Prescaler de 8 (Frecuencia PWM = 50Hz)
	TCCR1B |= (1 << CS11);
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
	//OCR1B =1005;
	//OCR1B =4995;
	ICR1 = 39999;   // TOP value para 50Hz
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	9c e9       	ldi	r25, 0x9C	; 156
 194:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 198:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	DDRB |= (1 << DDB2);  // Configura PB2 (OC1B) como salida
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	84 b9       	out	0x04, r24	; 4
 1a2:	08 95       	ret

000001a4 <__udivmodsi4>:
 1a4:	a1 e2       	ldi	r26, 0x21	; 33
 1a6:	1a 2e       	mov	r1, r26
 1a8:	aa 1b       	sub	r26, r26
 1aa:	bb 1b       	sub	r27, r27
 1ac:	fd 01       	movw	r30, r26
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <__udivmodsi4_ep>

000001b0 <__udivmodsi4_loop>:
 1b0:	aa 1f       	adc	r26, r26
 1b2:	bb 1f       	adc	r27, r27
 1b4:	ee 1f       	adc	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	e4 07       	cpc	r30, r20
 1be:	f5 07       	cpc	r31, r21
 1c0:	20 f0       	brcs	.+8      	; 0x1ca <__udivmodsi4_ep>
 1c2:	a2 1b       	sub	r26, r18
 1c4:	b3 0b       	sbc	r27, r19
 1c6:	e4 0b       	sbc	r30, r20
 1c8:	f5 0b       	sbc	r31, r21

000001ca <__udivmodsi4_ep>:
 1ca:	66 1f       	adc	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	88 1f       	adc	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	1a 94       	dec	r1
 1d4:	69 f7       	brne	.-38     	; 0x1b0 <__udivmodsi4_loop>
 1d6:	60 95       	com	r22
 1d8:	70 95       	com	r23
 1da:	80 95       	com	r24
 1dc:	90 95       	com	r25
 1de:	9b 01       	movw	r18, r22
 1e0:	ac 01       	movw	r20, r24
 1e2:	bd 01       	movw	r22, r26
 1e4:	cf 01       	movw	r24, r30
 1e6:	08 95       	ret

000001e8 <__umulhisi3>:
 1e8:	a2 9f       	mul	r26, r18
 1ea:	b0 01       	movw	r22, r0
 1ec:	b3 9f       	mul	r27, r19
 1ee:	c0 01       	movw	r24, r0
 1f0:	a3 9f       	mul	r26, r19
 1f2:	70 0d       	add	r23, r0
 1f4:	81 1d       	adc	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	91 1d       	adc	r25, r1
 1fa:	b2 9f       	mul	r27, r18
 1fc:	70 0d       	add	r23, r0
 1fe:	81 1d       	adc	r24, r1
 200:	11 24       	eor	r1, r1
 202:	91 1d       	adc	r25, r1
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
