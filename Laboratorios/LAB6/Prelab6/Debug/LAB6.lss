
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000822  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f3  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039b  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000eb  00000000  00000000  000018cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initUART>:
	sei();
}

void initUART(void){
	//Configurar los pines PD1 Tx y PD0 Rx
	DDRD=0;
  90:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<PORTD1)|(1<<PORTD7)|(1<<PORTD6);	//PD1 única salida
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	82 6c       	ori	r24, 0xC2	; 194
  96:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0;
  98:	1b b8       	out	0x0b, r1	; 11
	UCSR0A = 0;		//No se utiliza doble speed. 
  9a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;		
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  //Habilitamos interrupciones al recibir, habilitar recepción y transmisión
  a4:	80 81       	ld	r24, Z
  a6:	88 69       	ori	r24, 0x98	; 152
  a8:	80 83       	st	Z, r24
	UCSR0C = 0;
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);	//Asincrono, deshabilitado el bit de paridad, un stop bit, 8 bits de datos. 
  b0:	80 81       	ld	r24, Z
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
	UBRR0=103;	//UBBRR0=103; -> 9600 con frecuencia de 16MHz
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Configuración de PORTB
	DDRB =0;
  c2:	14 b8       	out	0x04, r1	; 4
	DDRB |= 0xFF; //PORTB como salida
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
	PORTB =0;
  ca:	15 b8       	out	0x05, r1	; 5
  cc:	08 95       	ret

000000ce <setup>:
/*********main*********/


/*********Subrutinas NON Interrupts*********/
void setup(void){
	cli();
  ce:	f8 94       	cli
	initUART();
  d0:	0e 94 48 00 	call	0x90	; 0x90 <initUART>
	sei();
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <write>:
	
	
}

void write(char texto){
	while ((UCSR0A & (1<<UDRIE0))==0);	//Esperamos a que el registro de datos de USART este vacío
  d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  dc:	95 ff       	sbrs	r25, 5
  de:	fc cf       	rjmp	.-8      	; 0xd8 <write>
	UDR0= texto;
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e4:	08 95       	ret

000000e6 <main>:


/*********main*********/
int main(void)
{
    setup();
  e6:	0e 94 67 00 	call	0xce	; 0xce <setup>
	write('l');
  ea:	8c e6       	ldi	r24, 0x6C	; 108
  ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('e');
  f0:	85 e6       	ldi	r24, 0x65	; 101
  f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('e');
  f6:	85 e6       	ldi	r24, 0x65	; 101
  f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('r');
  fc:	82 e7       	ldi	r24, 0x72	; 114
  fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write(' ');
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('e');
 108:	85 e6       	ldi	r24, 0x65	; 101
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('l');
 10e:	8c e6       	ldi	r24, 0x6C	; 108
 110:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write(' ');
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('P');
 11a:	80 e5       	ldi	r24, 0x50	; 80
 11c:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('O');
 120:	8f e4       	ldi	r24, 0x4F	; 79
 122:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	write('T');
 126:	84 e5       	ldi	r24, 0x54	; 84
 128:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x46>

0000012e <__vector_18>:

/*********Subrutinas NON Interrupts*********/


/*********Subrutinas Interrupts*********/
ISR(USART_RX_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	cf 93       	push	r28
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	char dato = UDR0;
 152:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	write(dato);
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 6c 00 	call	0xd8	; 0xd8 <write>
	mask_data = (dato&0b00111111);	//Limpiamos los bits mas significativos
 15c:	8c 2f       	mov	r24, r28
 15e:	8f 73       	andi	r24, 0x3F	; 63
	PORTB = mask_data;
 160:	85 b9       	out	0x05, r24	; 5
	mask_data = (dato&~(0b00111111));	//dejamos los bits mas significativos
 162:	c0 7c       	andi	r28, 0xC0	; 192
 164:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTD &= ~(0b00111111);				//Limpiamos los bits mas significativos del Puerto D
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 7c       	andi	r24, 0xC0	; 192
 16c:	8b b9       	out	0x0b, r24	; 11
	PORTD |= mask_data;					//Cargamos el nuevo valor
 16e:	9b b1       	in	r25, 0x0b	; 11
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	89 2b       	or	r24, r25
 176:	8b b9       	out	0x0b, r24	; 11
	
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	cf 91       	pop	r28
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
