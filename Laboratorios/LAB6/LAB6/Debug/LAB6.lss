
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d2  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000668  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initUART>:
	sei();
}

void initUART(void){
	//Configurar los pines PD1 Tx y PD0 Rx
	DDRD=0;
  80:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<PORTD1);	//PD1 única salida
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	82 60       	ori	r24, 0x02	; 2
  86:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;		//No se utiliza doble speed. 
  88:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;		
  8c:	e1 ec       	ldi	r30, 0xC1	; 193
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  //Habilitamos interrupciones al recibir, habilitar recepción y transmisión
  92:	80 81       	ld	r24, Z
  94:	88 69       	ori	r24, 0x98	; 152
  96:	80 83       	st	Z, r24
	UCSR0C = 0;
  98:	e2 ec       	ldi	r30, 0xC2	; 194
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);	//Asincrono, deshabilitado el bit de paridad, un stop bit, 8 bits de datos. 
  9e:	80 81       	ld	r24, Z
  a0:	86 60       	ori	r24, 0x06	; 6
  a2:	80 83       	st	Z, r24
	UBRR0=103;	//UBBRR0=103; -> 9600 con frecuencia de 16MHz
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b0:	08 95       	ret

000000b2 <setup>:
/*********main*********/


/*********Subrutinas NON Interrupts*********/
void setup(void){
	cli();
  b2:	f8 94       	cli
	initUART();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <initUART>
	sei();
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <writeChar>:
	UBRR0=103;	//UBBRR0=103; -> 9600 con frecuencia de 16MHz
	
}

void writeChar(char texto){
	while ((UCSR0A & (1<<UDRIE0))==0);	//Esperamos a que el registro de datos de USART este vacío
  bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <writeChar>
	UDR0= texto;
  c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c8:	08 95       	ret

000000ca <main>:


/*********main*********/
int main(void)
{
    setup();
  ca:	0e 94 59 00 	call	0xb2	; 0xb2 <setup>
	writeChar('l');
  ce:	8c e6       	ldi	r24, 0x6C	; 108
  d0:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('e');
  d4:	85 e6       	ldi	r24, 0x65	; 101
  d6:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('e');
  da:	85 e6       	ldi	r24, 0x65	; 101
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('r');
  e0:	82 e7       	ldi	r24, 0x72	; 114
  e2:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar(' ');
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('e');
  ec:	85 e6       	ldi	r24, 0x65	; 101
  ee:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('l');
  f2:	8c e6       	ldi	r24, 0x6C	; 108
  f4:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar(' ');
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('P');
  fe:	80 e5       	ldi	r24, 0x50	; 80
 100:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('O');
 104:	8f e4       	ldi	r24, 0x4F	; 79
 106:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	writeChar('T');
 10a:	84 e5       	ldi	r24, 0x54	; 84
 10c:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x46>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
