
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001e4  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800116  00800116  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088e  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000336  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a7  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017c  00000000  00000000  00001a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 91 00 	call	0x122	; 0x122 <main>
  9e:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
	sei();
}

void initUART(void){
	//Configurar los pines PD1 Tx y PD0 Rx
	DDRD=0;
  a6:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<PORTD1)|(1<<PORTD7)|(1<<PORTD6);	//PD1 única salida
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	82 6c       	ori	r24, 0xC2	; 194
  ac:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0;
  ae:	1b b8       	out	0x0b, r1	; 11
	UCSR0A = 0;		//No se utiliza doble speed. 
  b0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;		
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);  //Habilitamos interrupciones al recibir, habilitar recepción y transmisión
  ba:	80 81       	ld	r24, Z
  bc:	88 69       	ori	r24, 0x98	; 152
  be:	80 83       	st	Z, r24
	UCSR0C = 0;
  c0:	e2 ec       	ldi	r30, 0xC2	; 194
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);	//Asincrono, deshabilitado el bit de paridad, un stop bit, 8 bits de datos. 
  c6:	80 81       	ld	r24, Z
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	80 83       	st	Z, r24
	UBRR0=103;	//UBBRR0=103; -> 9600 con frecuencia de 16MHz
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Configuración de PORTB
	DDRB =0;
  d8:	14 b8       	out	0x04, r1	; 4
	DDRB |= 0xFF; //PORTB como salida
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
	PORTB =0;
  e0:	15 b8       	out	0x05, r1	; 5
  e2:	08 95       	ret

000000e4 <setup>:
/*********main*********/


/*********Subrutinas NON Interrupts*********/
void setup(void){
	cli();
  e4:	f8 94       	cli
	initUART();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
	sei();
  ea:	78 94       	sei
  ec:	08 95       	ret

000000ee <write>:
	
	
}

void write(char texto){
	while ((UCSR0A & (1<<UDRIE0))==0);	//Esperamos a que el registro de datos de USART este vacío
  ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f2:	95 ff       	sbrs	r25, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <write>
	UDR0= texto;
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	08 95       	ret

000000fc <writeString>:
}

void writeString(char* texto){
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <writeString+0x12>
	{
		write(*(texto+i));
 108:	0e 94 77 00 	call	0xee	; 0xee <write>
	while ((UCSR0A & (1<<UDRIE0))==0);	//Esperamos a que el registro de datos de USART este vacío
	UDR0= texto;
}

void writeString(char* texto){
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
 10c:	cf 5f       	subi	r28, 0xFF	; 255
 10e:	f8 01       	movw	r30, r16
 110:	ec 0f       	add	r30, r28
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	81 11       	cpse	r24, r1
 118:	f7 cf       	rjmp	.-18     	; 0x108 <writeString+0xc>
	{
		write(*(texto+i));
	}
	
}
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <main>:


/*********main*********/
int main(void)
{
    setup();
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <setup>
	write('l');
 126:	8c e6       	ldi	r24, 0x6C	; 108
 128:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('e');
 12c:	85 e6       	ldi	r24, 0x65	; 101
 12e:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('e');
 132:	85 e6       	ldi	r24, 0x65	; 101
 134:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('r');
 138:	82 e7       	ldi	r24, 0x72	; 114
 13a:	0e 94 77 00 	call	0xee	; 0xee <write>
	write(' ');
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('e');
 144:	85 e6       	ldi	r24, 0x65	; 101
 146:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('l');
 14a:	8c e6       	ldi	r24, 0x6C	; 108
 14c:	0e 94 77 00 	call	0xee	; 0xee <write>
	write(' ');
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('P');
 156:	80 e5       	ldi	r24, 0x50	; 80
 158:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('O');
 15c:	8f e4       	ldi	r24, 0x4F	; 79
 15e:	0e 94 77 00 	call	0xee	; 0xee <write>
	write('T');
 162:	84 e5       	ldi	r24, 0x54	; 84
 164:	0e 94 77 00 	call	0xee	; 0xee <write>
	writeString(" Se me quemo el nano\n");
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 7e 00 	call	0xfc	; 0xfc <writeString>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x4e>

00000172 <__vector_18>:

/*********Subrutinas NON Interrupts*********/


/*********Subrutinas Interrupts*********/
ISR(USART_RX_vect) {
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	cf 93       	push	r28
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	char dato = UDR0;
 196:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	write(dato);
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 77 00 	call	0xee	; 0xee <write>
	mask_data = (dato & 0b00111111);	//Limpiamos los bits mas significativos
 1a0:	8c 2f       	mov	r24, r28
 1a2:	8f 73       	andi	r24, 0x3F	; 63
	PORTB = mask_data;
 1a4:	85 b9       	out	0x05, r24	; 5
	
	mask_data = (dato & 0b11000000);	//dejamos los bits mas significativos
 1a6:	c0 7c       	andi	r28, 0xC0	; 192
 1a8:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <__data_end>
	
	PORTD &= (0b00111111);				//Limpiamos los bits mas significativos del Puerto D
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8f 73       	andi	r24, 0x3F	; 63
 1b0:	8b b9       	out	0x0b, r24	; 11
	PORTD |= mask_data;					//Cargamos el nuevo valor
 1b2:	9b b1       	in	r25, 0x0b	; 11
 1b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1b8:	89 2b       	or	r24, r25
 1ba:	8b b9       	out	0x0b, r24	; 11
	
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	cf 91       	pop	r28
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
