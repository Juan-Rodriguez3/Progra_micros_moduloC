
LAB04_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800112  00800112  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085e  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045d  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000160  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initTIMER0>:
	  
	sei();			//Activar interrupciones globales
}

void initTIMER0(){
	TCCR0A=0;
  a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1<<CS01);			//Modo normal prescaler 8
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	85 bd       	out	0x25, r24	; 37
	TCNT0= 5;
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	86 bd       	out	0x26, r24	; 38
	TIMSK0|=(1<<TOIE0);			//Habilitar interrupciones de desbordamiento.
  b0:	ee e6       	ldi	r30, 0x6E	; 110
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <initADC>:
}



void initADC(){
	ADMUX=0;
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
	ADMUX |= (1<<MUX1);			//Selecionar el canal 2
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);		//Justificación a la derecha
  c8:	80 81       	ld	r24, Z
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);		//Voltaje de referencia 5V
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	
	ADCSRA=0;
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS1) |(1<<ADPS0) ; // Habilitar ADC, interrupciones ADC y prescaler de 8
  da:	80 81       	ld	r24, Z
  dc:	8b 68       	ori	r24, 0x8B	; 139
  de:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);		// Empieza a leer o a hacer la conversión
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <setup>:
    }
}

//Subrutinas NON Interrupt
void setup () {
	cli();				//Desactivar interrupciones globales
  e8:	f8 94       	cli
	
	CLKPR = (1<< CLKPCE);
  ea:	e1 e6       	ldi	r30, 0x61	; 97
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
	CLKPR |= (1<<CLKPS2);	//Configurar prescaler principal a 16
  f2:	80 81       	ld	r24, Z
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	80 83       	st	Z, r24
	
	DDRC = 0x00;		//Pines PC0, PC1, PC2 como entrada
  f8:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1) ;		//pullups PC0,PC1
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC2);						//Deshabilitar el Pullup PC2	
 100:	88 b1       	in	r24, 0x08	; 8
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0xFF;		//Puerto D como salida
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;
 10a:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	87 60       	ori	r24, 0x07	; 7
 110:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		//Pines PB0, PB1 y PB2 como salida
 112:	15 b8       	out	0x05, r1	; 5
	
	PCICR |= (1 << PCIE1);		//habilita interrupciones en el PORTC
 114:	e8 e6       	ldi	r30, 0x68	; 104
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//interrupciones para PC0 y PC1
 11e:	ec e6       	ldi	r30, 0x6C	; 108
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	83 60       	ori	r24, 0x03	; 3
 126:	80 83       	st	Z, r24
	
	initADC();
 128:	0e 94 5e 00 	call	0xbc	; 0xbc <initADC>
	initTIMER0();
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <initTIMER0>
	  
	sei();			//Activar interrupciones globales
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <OVF_UNF>:
	ADCSRA |= (1<<ADSC);		// Empieza a leer o a hacer la conversión
}

int OVF_UNF(uint8_t cont, uint8_t top, uint8_t bottom){
	
	if (cont==bottom && pb==2){
 134:	84 13       	cpse	r24, r20
 136:	09 c0       	rjmp	.+18     	; 0x14a <OVF_UNF+0x16>
 138:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <pb>
 13c:	92 30       	cpi	r25, 0x02	; 2
 13e:	29 f4       	brne	.+10     	; 0x14a <OVF_UNF+0x16>
		cont=top;
		pb=0;
 140:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pb>
		return cont;
 144:	86 2f       	mov	r24, r22
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
	}
	else if (cont==top && pb==1){
 14a:	86 13       	cpse	r24, r22
 14c:	09 c0       	rjmp	.+18     	; 0x160 <OVF_UNF+0x2c>
 14e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <pb>
 152:	91 30       	cpi	r25, 0x01	; 1
 154:	29 f4       	brne	.+10     	; 0x160 <OVF_UNF+0x2c>
		cont=bottom;
		pb=0;
 156:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pb>
		return cont;
 15a:	84 2f       	mov	r24, r20
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
	}	
	else if(pb==1){
 160:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <pb>
 164:	91 30       	cpi	r25, 0x01	; 1
 166:	29 f4       	brne	.+10     	; 0x172 <OVF_UNF+0x3e>
		cont++;
 168:	8f 5f       	subi	r24, 0xFF	; 255
		pb=0;
 16a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pb>
		return cont;
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret
	}
	else if( pb==2){
 172:	92 30       	cpi	r25, 0x02	; 2
 174:	29 f4       	brne	.+10     	; 0x180 <OVF_UNF+0x4c>
		cont--;
 176:	81 50       	subi	r24, 0x01	; 1
		pb=0;
 178:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pb>
		return cont;
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
	}
	else {
		return cont;
 180:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 182:	08 95       	ret

00000184 <MUX>:

void MUX(uint8_t flag){
	switch (flag){
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 f0       	breq	.+36     	; 0x1ac <MUX+0x28>
 188:	18 f0       	brcs	.+6      	; 0x190 <MUX+0xc>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	d9 f0       	breq	.+54     	; 0x1c4 <MUX+0x40>
 18e:	08 95       	ret
		case 0:
		contador= OVF_UNF(contador, top, bottom);
 190:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <bottom>
 194:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <top>
 198:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 19c:	0e 94 9a 00 	call	0x134	; 0x134 <OVF_UNF>
 1a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
		PORTD= contador;
 1a4:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000100;
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	85 b9       	out	0x05, r24	; 5
		break;
 1aa:	08 95       	ret
		case 1:
		cont_hex=DISPLAY[DIPSH];
 1ac:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <DIPSH>
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	e0 50       	subi	r30, 0x00	; 0
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	80 81       	ld	r24, Z
 1b8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		PORTD = cont_hex;
 1bc:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000001;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	85 b9       	out	0x05, r24	; 5
		break;
 1c2:	08 95       	ret
		case 2:
		cont_hex=DISPLAY[DIPSL];
 1c4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <DIPSL>
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	80 81       	ld	r24, Z
 1d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		PORTD= cont_hex;
 1d4:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000010;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	85 b9       	out	0x05, r24	; 5
 1da:	08 95       	ret

000001dc <main>:
int OVF_UNF(uint8_t cont,  uint8_t top, uint8_t bottom);

//Funcion principal
int main(void)
{
    setup();
 1dc:	0e 94 74 00 	call	0xe8	; 0xe8 <setup>
    while (1) 
    {
		MUX(multiplex);
 1e0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <multiplex>
 1e4:	0e 94 c2 00 	call	0x184	; 0x184 <MUX>
 1e8:	fb cf       	rjmp	.-10     	; 0x1e0 <main+0x4>

000001ea <__vector_4>:

//Subrutinas NON Interrupt	


//Subrutinas de interrupciones
ISR(PCINT1_vect){
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24

	if (!(PINC & (1<<PINC0))){
 1f6:	30 99       	sbic	0x06, 0	; 6
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <__vector_4+0x18>
		pb=1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <pb>
 200:	08 c0       	rjmp	.+16     	; 0x212 <__vector_4+0x28>
	}
	else if (!(PINC & (1<<PINC1))){
 202:	31 99       	sbic	0x06, 1	; 6
 204:	04 c0       	rjmp	.+8      	; 0x20e <__vector_4+0x24>
		pb=2;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <pb>
 20c:	02 c0       	rjmp	.+4      	; 0x212 <__vector_4+0x28>
	}
	else{
		pb=0;
 20e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pb>
	}
}
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_21>:
ISR(ADC_vect){
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	DIPSL= (ADCH & 0x0F);
 22e:	e9 e7       	ldi	r30, 0x79	; 121
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <DIPSL>
	
	if (ADCH & (1<<4)){
 23a:	80 81       	ld	r24, Z
 23c:	84 ff       	sbrs	r24, 4
 23e:	06 c0       	rjmp	.+12     	; 0x24c <__vector_21+0x2e>
		DIPSH|=(1<<0);
 240:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 244:	81 60       	ori	r24, 0x01	; 1
 246:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
 24a:	05 c0       	rjmp	.+10     	; 0x256 <__vector_21+0x38>
	}
	else {
		DIPSH&=~(1<<0);
 24c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 250:	8e 7f       	andi	r24, 0xFE	; 254
 252:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
	}
	
	if (ADCH & (1<<5)){
 256:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 25a:	85 ff       	sbrs	r24, 5
 25c:	06 c0       	rjmp	.+12     	; 0x26a <__vector_21+0x4c>
		DIPSH|=(1<<1);
 25e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
 268:	05 c0       	rjmp	.+10     	; 0x274 <__vector_21+0x56>
	}
	else {
		DIPSH&=~(1<<1);
 26a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
	}
	
	if (ADCH & (1<<6) ){
 274:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 278:	86 ff       	sbrs	r24, 6
 27a:	06 c0       	rjmp	.+12     	; 0x288 <__vector_21+0x6a>
		DIPSH|=(1<<2);
 27c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 280:	84 60       	ori	r24, 0x04	; 4
 282:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
 286:	05 c0       	rjmp	.+10     	; 0x292 <__vector_21+0x74>
	}
	else {
		DIPSH&=~(1<<2);
 288:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 28c:	8b 7f       	andi	r24, 0xFB	; 251
 28e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
	}
	
	if (ADCH & (1<<7)){
 292:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 296:	88 23       	and	r24, r24
 298:	34 f4       	brge	.+12     	; 0x2a6 <__vector_21+0x88>
		DIPSH|=(1<<3);
 29a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 29e:	88 60       	ori	r24, 0x08	; 8
 2a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <__vector_21+0x92>
	}
	else {
		DIPSH&=~(1<<3);
 2a6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DIPSH>
 2aa:	87 7f       	andi	r24, 0xF7	; 247
 2ac:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <DIPSH>
	}
	
	ADCSRA |= (1<<ADSC);		//Vuelve a leer
 2b0:	ea e7       	ldi	r30, 0x7A	; 122
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	80 83       	st	Z, r24
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_16>:



ISR(TIMER0_OVF_vect){
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
	TCNT0= 5;				//Reiniciar el contador
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	86 bd       	out	0x26, r24	; 38
	multiplex++;
 2da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <multiplex>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <multiplex>
	if (multiplex==3){
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	11 f4       	brne	.+4      	; 0x2ec <__vector_16+0x22>
		multiplex=0;
 2e8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <multiplex>
	}
	
}
 2ec:	8f 91       	pop	r24
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
