
LAB04_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001b6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b6  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b8  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000348  00000000  00000000  0000116a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  9e:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

//Subrutinas NON Interrupt
void setup () {
	cli();				//Desactivar interrupciones globales
  a6:	f8 94       	cli
	
	/*CLKPR = (1<< CLKPCE);
	CLKPR |= (1<<CLKPS2);	//Configurar prescaler principal a 16*/
	
	DDRC = 0x00;		//Pines PC0, PC1, PC2 como entrada
  a8:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1) ;		//pullups PC0,PC1
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC2);						//Deshabilitar el Pullup PC2	
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0xFF;		//Puerto D como salida
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;
  ba:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		//Pines PB0, PB1 y PB2 como salida
  c2:	15 b8       	out	0x05, r1	; 5
	
	PCICR |= (1 << PCIE1);		//habilita interrupciones en el PORTC
  c4:	e8 e6       	ldi	r30, 0x68	; 104
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//interrupciones para PC0 y PC1
  ce:	ec e6       	ldi	r30, 0x6C	; 108
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	80 83       	st	Z, r24
	
	//initADC();
	//initTIMER0();
	  
	sei();			//Activar interrupciones globales
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <OVF_UNF>:
	ADCSRA |= (1<<ADSC);		// Empieza a leer o a hacer la conversión
}
*/
int OVF_UNF(uint8_t cont, uint8_t top, uint8_t bottom){
	
	if (cont==bottom && pb==2){
  dc:	84 13       	cpse	r24, r20
  de:	09 c0       	rjmp	.+18     	; 0xf2 <OVF_UNF+0x16>
  e0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pb>
  e4:	92 30       	cpi	r25, 0x02	; 2
  e6:	29 f4       	brne	.+10     	; 0xf2 <OVF_UNF+0x16>
		cont=top;
		pb=0;
  e8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
  ec:	86 2f       	mov	r24, r22
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 95       	ret
	}
	else if (cont==top && pb==1){
  f2:	86 13       	cpse	r24, r22
  f4:	09 c0       	rjmp	.+18     	; 0x108 <OVF_UNF+0x2c>
  f6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pb>
  fa:	91 30       	cpi	r25, 0x01	; 1
  fc:	29 f4       	brne	.+10     	; 0x108 <OVF_UNF+0x2c>
		cont=bottom;
		pb=0;
  fe:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
 102:	84 2f       	mov	r24, r20
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret
	}	
	else if(pb==1){
 108:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pb>
 10c:	91 30       	cpi	r25, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <OVF_UNF+0x3e>
		cont++;
 110:	8f 5f       	subi	r24, 0xFF	; 255
		pb=0;
 112:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
	}
	else if( pb==2){
 11a:	92 30       	cpi	r25, 0x02	; 2
 11c:	29 f4       	brne	.+10     	; 0x128 <OVF_UNF+0x4c>
		cont--;
 11e:	81 50       	subi	r24, 0x01	; 1
		pb=0;
 120:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
	}
	else {
		return cont;
 128:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 12a:	08 95       	ret

0000012c <MUX>:

void MUX(uint8_t flag){
	switch (flag){
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	91 f0       	breq	.+36     	; 0x154 <MUX+0x28>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	b9 f0       	breq	.+46     	; 0x162 <MUX+0x36>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	d9 f4       	brne	.+54     	; 0x16e <MUX+0x42>
		case 1:
		contador= OVF_UNF(contador, top, bottom);
 138:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 13c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <top>
 140:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 144:	0e 94 6e 00 	call	0xdc	; 0xdc <OVF_UNF>
 148:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
		PORTD= contador;
 14c:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0x04;
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	85 b9       	out	0x05, r24	; 5
		break;
 152:	08 95       	ret
		case 2:
		contador=0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
		PORTD= contador;
 15a:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	85 b9       	out	0x05, r24	; 5
		break;
 160:	08 95       	ret
		case 3:
		contador=0xFF;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
		PORTD= contador;
 168:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0x02;
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	08 95       	ret

00000170 <main>:
int OVF_UNF(uint8_t cont,  uint8_t top, uint8_t bottom);

//Funcion principal
int main(void)
{
    setup();
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    while (1) 
    {
		MUX(multiplex);
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 178:	0e 94 96 00 	call	0x12c	; 0x12c <MUX>
 17c:	fb cf       	rjmp	.-10     	; 0x174 <main+0x4>

0000017e <__vector_4>:

//Subrutinas NON Interrupt	


//Subrutinas de interrupciones
ISR(PCINT1_vect){
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24

	if (!(PINC & (1<<PINC0))){
 18a:	30 99       	sbic	0x06, 0	; 6
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__vector_4+0x18>
		pb=1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pb>
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <__vector_4+0x28>
	}
	else if (!(PINC & (1<<PINC1))){
 196:	31 99       	sbic	0x06, 1	; 6
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <__vector_4+0x24>
		pb=2;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pb>
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_4+0x28>
	}
	else{
		pb=0;
 1a2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
	}
}
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
