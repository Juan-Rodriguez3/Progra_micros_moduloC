
LAB04_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800114  00800114  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000870  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000424  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000160  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initTIMER0>:
	UCSR0B = 0x00;  // Desactiva transmisor y receptor
	sei();			//Activar interrupciones globales
}

void initTIMER0(){
	TCCR0A=0;
  a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS01)|(1<<CS00);			//Modo normal prescaler 8
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	85 bd       	out	0x25, r24	; 37
	TCNT0= delay_ms;
  ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <delay_ms>
  b2:	86 bd       	out	0x26, r24	; 38
	TIMSK0|=(1<<TOIE0);			//Habilitar interrupciones de desbordamiento.
  b4:	ee e6       	ldi	r30, 0x6E	; 110
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <initADC>:
}

void initADC(){
	ADMUX=0;
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	ADMUX |= (1<<MUX1);			//Selecionar el canal 2
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);		//Justificaci?n a la derecha
  cc:	80 81       	ld	r24, Z
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);		//Voltaje de referencia 5V
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	
	ADCSRA=0;
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS1) |(1<<ADPS0) ; // Habilitar ADC, interrupciones ADC y prescaler de 8
  de:	80 81       	ld	r24, Z
  e0:	8b 68       	ori	r24, 0x8B	; 139
  e2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);		// Empieza a leer o a hacer la conversi?n
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <setup>:
    }
}

//Subrutinas NON Interrupt
void setup () {
	cli();				//Desactivar interrupciones globales
  ec:	f8 94       	cli
	CLKPR = (1<< CLKPCE);
  ee:	e1 e6       	ldi	r30, 0x61	; 97
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
	CLKPR |= (1<<CLKPS2);	//Configurar prescaler principal a 16
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
	DDRC = 0x00;		//Pines PC0, PC1, PC2 como entrada
  fc:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1) ;		//pullups PC0,PC1
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	83 60       	ori	r24, 0x03	; 3
 102:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC2);						//Deshabilitar el Pullup PC2	
 104:	88 b1       	in	r24, 0x08	; 8
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;		//Puerto D como salida
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;
 10e:	1b b8       	out	0x0b, r1	; 11
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2)| (1 << PORTB3);
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8f 60       	ori	r24, 0x0F	; 15
 114:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		//Pines PB0, PB1 y PB2 como salida
 116:	15 b8       	out	0x05, r1	; 5
	PCICR |= (1 << PCIE1);		//habilita interrupciones en el PORTC
 118:	e8 e6       	ldi	r30, 0x68	; 104
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//interrupciones para PC0 y PC1
 122:	ec e6       	ldi	r30, 0x6C	; 108
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	83 60       	ori	r24, 0x03	; 3
 12a:	80 83       	st	Z, r24
	initADC();
 12c:	0e 94 60 00 	call	0xc0	; 0xc0 <initADC>
	initTIMER0();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <initTIMER0>
	UCSR0B = 0x00;  // Desactiva transmisor y receptor
 134:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();			//Activar interrupciones globales
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <OVF_UNF>:
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS1) |(1<<ADPS0) ; // Habilitar ADC, interrupciones ADC y prescaler de 8
	ADCSRA |= (1<<ADSC);		// Empieza a leer o a hacer la conversi?n
}

int OVF_UNF(uint8_t cont, uint8_t top, uint8_t bottom){
	if (cont==bottom && pb==2){
 13c:	84 13       	cpse	r24, r20
 13e:	09 c0       	rjmp	.+18     	; 0x152 <OVF_UNF+0x16>
 140:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pb>
 144:	92 30       	cpi	r25, 0x02	; 2
 146:	29 f4       	brne	.+10     	; 0x152 <OVF_UNF+0x16>
		cont=top;
		pb=0;
 148:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pb>
		return cont;
 14c:	86 2f       	mov	r24, r22
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
	}
	else if (cont==top && pb==1){
 152:	86 13       	cpse	r24, r22
 154:	09 c0       	rjmp	.+18     	; 0x168 <OVF_UNF+0x2c>
 156:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pb>
 15a:	91 30       	cpi	r25, 0x01	; 1
 15c:	29 f4       	brne	.+10     	; 0x168 <OVF_UNF+0x2c>
		cont=bottom;
		pb=0;
 15e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pb>
		return cont;
 162:	84 2f       	mov	r24, r20
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret
	}	
	else if(pb==1){
 168:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pb>
 16c:	91 30       	cpi	r25, 0x01	; 1
 16e:	29 f4       	brne	.+10     	; 0x17a <OVF_UNF+0x3e>
		cont++;
 170:	8f 5f       	subi	r24, 0xFF	; 255
		pb=0;
 172:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pb>
		return cont;
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret
	}
	else if( pb==2){
 17a:	92 30       	cpi	r25, 0x02	; 2
 17c:	29 f4       	brne	.+10     	; 0x188 <OVF_UNF+0x4c>
		cont--;
 17e:	81 50       	subi	r24, 0x01	; 1
		pb=0;
 180:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pb>
		return cont;
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret
	}
	else {
		return cont;
 188:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 18a:	08 95       	ret

0000018c <MUX>:

void MUX(uint8_t flag){
	switch (flag){
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 f0       	breq	.+36     	; 0x1b4 <MUX+0x28>
 190:	18 f0       	brcs	.+6      	; 0x198 <MUX+0xc>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	c9 f0       	breq	.+50     	; 0x1c8 <MUX+0x3c>
 196:	08 95       	ret
		case 0:
		contador=OVF_UNF(contador, top, bottom);
 198:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <bottom>
 19c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <top>
 1a0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <contador>
 1a4:	0e 94 9e 00 	call	0x13c	; 0x13c <OVF_UNF>
 1a8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <contador>
		PORTD= contador;
 1ac:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000100;
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	85 b9       	out	0x05, r24	; 5
		break;
 1b2:	08 95       	ret
		case 1:
		PORTD=DISPLAY[DIPSH];  //Mostrar parte alta 
 1b4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	e0 50       	subi	r30, 0x00	; 0
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	80 81       	ld	r24, Z
 1c0:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000001;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	85 b9       	out	0x05, r24	; 5
		break;
 1c6:	08 95       	ret
		case 2:
		PORTD= DISPLAY[DIPSL];	//Mostrar parte baja
 1c8:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <DIPSL>
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e0 50       	subi	r30, 0x00	; 0
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 81       	ld	r24, Z
 1d4:	8b b9       	out	0x0b, r24	; 11
		PORTB = 0b00000010;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	85 b9       	out	0x05, r24	; 5
 1da:	08 95       	ret

000001dc <main>:
int OVF_UNF(uint8_t cont,  uint8_t top, uint8_t bottom);

//Funcion principal
int main(void)
{
    setup();
 1dc:	0e 94 76 00 	call	0xec	; 0xec <setup>
    while (1) 
    {
		MUX(multiplex);
 1e0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <multiplex>
 1e4:	0e 94 c6 00 	call	0x18c	; 0x18c <MUX>
		if (ADCH>contador){
 1e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ec:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <contador>
 1f0:	89 17       	cp	r24, r25
 1f2:	20 f4       	brcc	.+8      	; 0x1fc <main+0x20>
			PORTB |= (1<<PORTB3);		//Encender Led de alarma
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	85 b9       	out	0x05, r24	; 5
 1fa:	f2 cf       	rjmp	.-28     	; 0x1e0 <main+0x4>
		}
		else{
			PORTB &= ~(1<<PORTB3);
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	85 b9       	out	0x05, r24	; 5
 202:	ee cf       	rjmp	.-36     	; 0x1e0 <main+0x4>

00000204 <__vector_4>:
	}
}
//Subrutinas NON Interrupt	

//Subrutinas de interrupciones
ISR(PCINT1_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
	if (!(PINC & (1<<PINC0))){
 210:	30 99       	sbic	0x06, 0	; 6
 212:	04 c0       	rjmp	.+8      	; 0x21c <__vector_4+0x18>
		pb=1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pb>
 21a:	08 c0       	rjmp	.+16     	; 0x22c <__vector_4+0x28>
	}
	else if (!(PINC & (1<<PINC1))){
 21c:	31 99       	sbic	0x06, 1	; 6
 21e:	04 c0       	rjmp	.+8      	; 0x228 <__vector_4+0x24>
		pb=2;
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pb>
 226:	02 c0       	rjmp	.+4      	; 0x22c <__vector_4+0x28>
	}
	else{
		pb=0;
 228:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pb>
	}
}
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_21>:
ISR(ADC_vect){
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	DIPSL= (ADCH & 0x0F);		//Parte baja de la lectura de ADC
 248:	e9 e7       	ldi	r30, 0x79	; 121
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8f 70       	andi	r24, 0x0F	; 15
 250:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <DIPSL>
	DIPSH= (ADCH>>4) ;		//Parte alta desplaza a los bits menos significativos para que su valor sea entre 0 a 15
 254:	80 81       	ld	r24, Z
 256:	82 95       	swap	r24
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	ADCSRA |= (1<<ADSC);		//Vuelve a leer
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 64       	ori	r24, 0x40	; 64
 266:	80 83       	st	Z, r24
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_16>:

ISR(TIMER0_OVF_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	8f 93       	push	r24
	TCNT0= delay_ms;				//Reiniciar el contador
 284:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <delay_ms>
 288:	86 bd       	out	0x26, r24	; 38
	multiplex++;
 28a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <multiplex>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <multiplex>
	if (multiplex==3){
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	11 f4       	brne	.+4      	; 0x29c <__vector_16+0x24>
		multiplex=0;
 298:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <multiplex>
	}
	
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
