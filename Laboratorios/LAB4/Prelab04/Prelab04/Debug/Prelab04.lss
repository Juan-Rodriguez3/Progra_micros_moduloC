
Prelab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000017e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074d  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069e  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  000010a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000013a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007b  00000000  00000000  0000179f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}

//Subrutinas NON Interrupt
void setup () {
	cli();				//Desactivar interrupciones globales
  a6:	f8 94       	cli
	
	DDRC = 0x00;		//Pines PC0, PC1, PC2 como entrada
  a8:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1) ;		//pullups portc
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0xFF;		//Puerto D como salida
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;
  b4:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2);
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		//Pines PB0, PB1 y PB2 como salida
  bc:	15 b8       	out	0x05, r1	; 5
	
	PCICR |= (1 << PCIE1);		//habilita interrupciones en el PORTC
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//interrupciones para PC0 y PC1
  c8:	ec e6       	ldi	r30, 0x6C	; 108
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24
	
	sei();			//Activar interrupciones globales
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <OVF_UNF>:
}

int OVF_UNF(uint8_t cont, uint8_t top, uint8_t bottom){
	
	if (cont==bottom && pb==2){
  d6:	84 13       	cpse	r24, r20
  d8:	09 c0       	rjmp	.+18     	; 0xec <OVF_UNF+0x16>
  da:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pb>
  de:	92 30       	cpi	r25, 0x02	; 2
  e0:	29 f4       	brne	.+10     	; 0xec <OVF_UNF+0x16>
		cont=top;
		pb=0;
  e2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
  e6:	86 2f       	mov	r24, r22
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret
	}
	else if (cont==top && pb==1){
  ec:	86 13       	cpse	r24, r22
  ee:	09 c0       	rjmp	.+18     	; 0x102 <OVF_UNF+0x2c>
  f0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pb>
  f4:	91 30       	cpi	r25, 0x01	; 1
  f6:	29 f4       	brne	.+10     	; 0x102 <OVF_UNF+0x2c>
		cont=bottom;
		pb=0;
  f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
  fc:	84 2f       	mov	r24, r20
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret
	}	
	else if(pb==1){
 102:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pb>
 106:	91 30       	cpi	r25, 0x01	; 1
 108:	29 f4       	brne	.+10     	; 0x114 <OVF_UNF+0x3e>
		cont++;
 10a:	8f 5f       	subi	r24, 0xFF	; 255
		pb=0;
 10c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
	}
	else if( pb==2){
 114:	92 30       	cpi	r25, 0x02	; 2
 116:	29 f4       	brne	.+10     	; 0x122 <OVF_UNF+0x4c>
		cont--;
 118:	81 50       	subi	r24, 0x01	; 1
		pb=0;
 11a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
		return cont;
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
	}
	else {
		return cont;
 122:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 124:	08 95       	ret

00000126 <main>:
int OVF_UNF(uint8_t cont,  uint8_t top, uint8_t bottom);

//Funcion principal
int main(void)
{
    setup();
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    while (1) 
    {
		PORTB = (1<<PORTB2);
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	85 b9       	out	0x05, r24	; 5
		contador= OVF_UNF(contador, top, bottom);
 12e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 132:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 13a:	0e 94 6b 00 	call	0xd6	; 0xd6 <OVF_UNF>
 13e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
		PORTD= contador;
 142:	8b b9       	out	0x0b, r24	; 11
 144:	f2 cf       	rjmp	.-28     	; 0x12a <main+0x4>

00000146 <__vector_4>:

//Subrutinas NON Interrupt	


//Subrutinas de interrupciones
ISR(PCINT1_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
	
	if (!(PINC & (1<<PINC0))){
 152:	30 99       	sbic	0x06, 0	; 6
 154:	04 c0       	rjmp	.+8      	; 0x15e <__vector_4+0x18>
		pb=1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pb>
 15c:	08 c0       	rjmp	.+16     	; 0x16e <__vector_4+0x28>
	}
	else if (!(PINC & (1<<PINC1))){
 15e:	31 99       	sbic	0x06, 1	; 6
 160:	04 c0       	rjmp	.+8      	; 0x16a <__vector_4+0x24>
		pb=2;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pb>
 168:	02 c0       	rjmp	.+4      	; 0x16e <__vector_4+0x28>
	}
	else{
		pb=0;
 16a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pb>
	}
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
